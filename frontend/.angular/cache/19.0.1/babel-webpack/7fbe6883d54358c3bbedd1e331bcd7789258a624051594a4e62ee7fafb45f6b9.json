{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet ContaComponent = class ContaComponent {\n  contaService;\n  contas = [];\n  contaSelecionada = null;\n  nomeTitular = '';\n  valor = 0;\n  mostrarExtrato = false;\n  extrato = [];\n  constructor(contaService) {\n    this.contaService = contaService;\n  }\n  ngOnInit() {\n    this.carregarContas();\n  }\n  /**\n   * Carrega todas as contas do usuário logado.\n   */\n  carregarContas() {\n    const idUsuario = +localStorage.getItem('idUsuario');\n    if (!idUsuario) {\n      alert('Usuário não autenticado!');\n      return;\n    }\n    this.contaService.listarContas(idUsuario).subscribe({\n      next: contas => {\n        this.contas = contas;\n        if (contas.length > 0) {\n          this.selecionarConta(contas[0]); // Se já tiver contas, seleciona a primeira\n        }\n      },\n      error: err => {\n        console.error('Erro ao listar contas:', err);\n        alert('Não foi possível carregar as contas.');\n      }\n    });\n  }\n  /**\n   * Seleciona uma conta e carrega os detalhes dela.\n   * @param conta A conta a ser selecionada.\n   */\n  selecionarConta(conta) {\n    this.contaSelecionada = conta;\n    this.carregarDetalhesConta();\n  }\n  /**\n   * Carrega os detalhes da conta selecionada.\n   */\n  carregarDetalhesConta() {\n    if (!this.contaSelecionada) return;\n    const idConta = this.contaSelecionada.idConta;\n    this.contaService.getSaldo(idConta).subscribe({\n      next: saldo => {\n        this.contaSelecionada.saldo = saldo;\n      },\n      error: err => {\n        console.error('Erro ao obter saldo:', err);\n        alert('Não foi possível carregar o saldo.');\n      }\n    });\n    if (this.mostrarExtrato) {\n      this.carregarExtrato();\n    }\n  }\n  /**\n   * Cria uma nova conta para o usuário.\n   */\n  criarConta() {\n    const idUsuario = +localStorage.getItem('idUsuario');\n    if (!idUsuario) {\n      alert('Usuário não autenticado!');\n      return;\n    }\n    if (!this.nomeTitular.trim()) {\n      alert('Informe o nome do titular para criar a conta.');\n      return;\n    }\n    this.contaService.criarConta({\n      nomeTitular: this.nomeTitular\n    }, idUsuario).subscribe({\n      next: novaConta => {\n        alert('Conta criada com sucesso!');\n        this.contas.push(novaConta);\n        this.selecionarConta(novaConta);\n      },\n      error: err => {\n        console.error('Erro ao criar conta:', err);\n        alert('Não foi possível criar a conta.');\n      }\n    });\n  }\n  /**\n   * Realiza um depósito na conta selecionada.\n   */\n  realizarDeposito() {\n    if (!this.contaSelecionada || this.valor <= 0) {\n      alert('Informe um valor válido para depósito.');\n      return;\n    }\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Depósito realizado com sucesso!');\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\n      },\n      error: err => {\n        console.error('Erro ao realizar depósito:', err);\n        alert('Erro ao realizar depósito. Tente novamente mais tarde.');\n      }\n    });\n  }\n  /**\n   * Realiza um saque da conta selecionada.\n   */\n  realizarSaque() {\n    if (!this.contaSelecionada || this.valor <= 0) {\n      alert('Informe um valor válido para saque.');\n      return;\n    }\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Saque realizado com sucesso!');\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\n      },\n      error: err => {\n        console.error('Erro ao realizar saque:', err);\n        alert('Erro ao realizar saque. Tente novamente mais tarde.');\n      }\n    });\n  }\n  /**\n   * Alterna a exibição do extrato da conta selecionada.\n   */\n  alternarExtrato() {\n    this.mostrarExtrato = !this.mostrarExtrato;\n    if (this.mostrarExtrato) {\n      this.carregarExtrato();\n    }\n  }\n  /**\n   * Carrega o extrato da conta selecionada.\n   */\n  carregarExtrato() {\n    if (!this.contaSelecionada) return;\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n      next: extrato => {\n        this.extrato = extrato;\n      },\n      error: err => {\n        console.error('Erro ao obter extrato:', err);\n        alert('Não foi possível carregar o extrato.');\n      }\n    });\n  }\n};\nContaComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-conta',\n  templateUrl: './conta-component.component.html',\n  styleUrls: ['./conta-component.component.css'],\n  imports: [CommonModule, FormsModule]\n})], ContaComponent);\nexport { ContaComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","ContaComponent","contaService","contas","contaSelecionada","nomeTitular","valor","mostrarExtrato","extrato","constructor","ngOnInit","carregarContas","idUsuario","localStorage","getItem","alert","listarContas","subscribe","next","length","selecionarConta","error","err","console","conta","carregarDetalhesConta","idConta","getSaldo","saldo","carregarExtrato","criarConta","trim","novaConta","push","realizarDeposito","realizarSaque","alternarExtrato","getExtrato","__decorate","standalone","selector","templateUrl","styleUrls","imports"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  contas: ContaDTO[] = [];\r\n  contaSelecionada: ContaDTO | null = null;\r\n  nomeTitular: string = '';\r\n  valor: number = 0;\r\n  mostrarExtrato: boolean = false;\r\n  extrato: any[] = [];\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.carregarContas();\r\n  }\r\n\r\n  /**\r\n   * Carrega todas as contas do usuário logado.\r\n   */\r\n  carregarContas(): void {\r\n    const idUsuario = +localStorage.getItem('idUsuario')!;\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n\r\n    this.contaService.listarContas(idUsuario).subscribe({\r\n      next: (contas) => {\r\n        this.contas = contas;\r\n        if (contas.length > 0) {\r\n          this.selecionarConta(contas[0]); // Se já tiver contas, seleciona a primeira\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas:', err);\r\n        alert('Não foi possível carregar as contas.');\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Seleciona uma conta e carrega os detalhes dela.\r\n   * @param conta A conta a ser selecionada.\r\n   */\r\n  selecionarConta(conta: ContaDTO): void {\r\n    this.contaSelecionada = conta;\r\n    this.carregarDetalhesConta();\r\n  }\r\n\r\n  /**\r\n   * Carrega os detalhes da conta selecionada.\r\n   */\r\n  carregarDetalhesConta(): void {\r\n    if (!this.contaSelecionada) return;\r\n\r\n    const idConta = this.contaSelecionada.idConta;\r\n    this.contaService.getSaldo(idConta).subscribe({\r\n      next: (saldo) => {\r\n        this.contaSelecionada!.saldo = saldo;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao obter saldo:', err);\r\n        alert('Não foi possível carregar o saldo.');\r\n      },\r\n    });\r\n\r\n    if (this.mostrarExtrato) {\r\n      this.carregarExtrato();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria uma nova conta para o usuário.\r\n   */\r\n  criarConta(): void {\r\n    const idUsuario = +localStorage.getItem('idUsuario')!;\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n  \r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular }, idUsuario).subscribe({\r\n      next: (novaConta: ContaDTO) => { // Tipando 'novaConta' corretamente\r\n        alert('Conta criada com sucesso!');\r\n        this.contas.push(novaConta);\r\n        this.selecionarConta(novaConta);\r\n      },\r\n      error: (err: any) => { // Tipando 'err' como 'any', mas se souber o tipo de erro, use algo mais específico\r\n        console.error('Erro ao criar conta:', err);\r\n        alert('Não foi possível criar a conta.');\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  /**\r\n   * Realiza um depósito na conta selecionada.\r\n   */\r\n  realizarDeposito(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar depósito:', err);\r\n        alert('Erro ao realizar depósito. Tente novamente mais tarde.');\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Realiza um saque da conta selecionada.\r\n   */\r\n  realizarSaque(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar saque:', err);\r\n        alert('Erro ao realizar saque. Tente novamente mais tarde.');\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alterna a exibição do extrato da conta selecionada.\r\n   */\r\n  alternarExtrato(): void {\r\n    this.mostrarExtrato = !this.mostrarExtrato;\r\n    if (this.mostrarExtrato) {\r\n      this.carregarExtrato();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Carrega o extrato da conta selecionada.\r\n   */\r\n  carregarExtrato(): void {\r\n    if (!this.contaSelecionada) return;\r\n\r\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n      next: (extrato) => {\r\n        this.extrato = extrato;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao obter extrato:', err);\r\n        alert('Não foi possível carregar o extrato.');\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}