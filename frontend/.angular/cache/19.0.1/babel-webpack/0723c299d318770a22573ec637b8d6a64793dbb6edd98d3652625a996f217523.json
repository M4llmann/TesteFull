{"ast":null,"code":"import { forkJoin, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\n    constructor(http) {\n      this.http = http;\n    }\n    // Método para criar uma nova conta\n    criarConta(contaDTO, idUsuario) {\n      return this.http.post(`${this.apiUrl}/${idUsuario}`, contaDTO);\n    }\n    // Método para listar várias contas\n    listarContas(idsContas) {\n      if (idsContas.length === 0) {\n        return of([]);\n      }\n      const requisicoes = idsContas.map(idConta => this.http.get(`${this.apiUrl}/${idConta}`));\n      return forkJoin(requisicoes);\n    }\n    // Método para realizar um depósito\n    realizarDeposito(idConta, valor) {\n      const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\n      return this.http.post(url, {});\n    }\n    // Método para realizar um saque\n    realizarSaque(idConta, valor) {\n      const url = `${this.apiUrl}/${idConta}/saque?valor=${valor}`;\n      return this.http.post(url, {});\n    }\n    // Método para consultar o saldo de uma conta\n    getSaldo(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/saldo`);\n    }\n    // Método para obter o extrato de uma conta\n    getExtrato(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["forkJoin","of","ContaService","http","apiUrl","constructor","criarConta","contaDTO","idUsuario","post","listarContas","idsContas","length","requisicoes","map","idConta","get","realizarDeposito","valor","url","realizarSaque","getSaldo","getExtrato","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Método para criar uma nova conta\r\n  criarConta(contaDTO: { nomeTitular: string; status: string }, idUsuario: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idUsuario}`, contaDTO);\r\n  }\r\n\r\n  // Método para listar várias contas\r\n  listarContas(idsContas: number[]): Observable<ContaDTO[]> {\r\n    if (idsContas.length === 0) {\r\n      return of([]);\r\n    }\r\n    const requisicoes = idsContas.map((idConta) =>\r\n      this.http.get<ContaDTO>(`${this.apiUrl}/${idConta}`)\r\n    );\r\n    return forkJoin(requisicoes);\r\n  }\r\n\r\n  // Método para realizar um depósito\r\n  realizarDeposito(idConta: number, valor: number): Observable<ContaDTO> {\r\n    const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\r\n    return this.http.post<ContaDTO>(url, {});\r\n  }\r\n\r\n  // Método para realizar um saque\r\n  realizarSaque(idConta: number, valor: number): Observable<ContaDTO> {\r\n    const url = `${this.apiUrl}/${idConta}/saque?valor=${valor}`;\r\n    return this.http.post<ContaDTO>(url, {});\r\n  }\r\n\r\n  // Método para consultar o saldo de uma conta\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  // Método para obter o extrato de uma conta\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,QAAQ,EAAcC,EAAE,QAAQ,MAAM;;;AAM/C,WAAaC,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IAErDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;IACAG,UAAUA,CAACC,QAAiD,EAAEC,SAAiB;MAC7E,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,MAAM,IAAII,SAAS,EAAE,EAAED,QAAQ,CAAC;IAC1E;IAEA;IACAG,YAAYA,CAACC,SAAmB;MAC9B,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAOX,EAAE,CAAC,EAAE,CAAC;MACf;MACA,MAAMY,WAAW,GAAGF,SAAS,CAACG,GAAG,CAAEC,OAAO,IACxC,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACZ,MAAM,IAAIW,OAAO,EAAE,CAAC,CACrD;MACD,OAAOf,QAAQ,CAACa,WAAW,CAAC;IAC9B;IAEA;IACAI,gBAAgBA,CAACF,OAAe,EAAEG,KAAa;MAC7C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,MAAM,IAAIW,OAAO,mBAAmBG,KAAK,EAAE;MAC/D,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAWU,GAAG,EAAE,EAAE,CAAC;IAC1C;IAEA;IACAC,aAAaA,CAACL,OAAe,EAAEG,KAAa;MAC1C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,MAAM,IAAIW,OAAO,gBAAgBG,KAAK,EAAE;MAC5D,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAWU,GAAG,EAAE,EAAE,CAAC;IAC1C;IAEA;IACAE,QAAQA,CAACN,OAAe;MACtB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACZ,MAAM,IAAIW,OAAO,QAAQ,CAAC;IACjE;IAEA;IACAO,UAAUA,CAACP,OAAe;MACxB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAQ,GAAG,IAAI,CAACZ,MAAM,IAAIW,OAAO,UAAU,CAAC;IAClE;;uCAzCWb,YAAY,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZxB,YAAY;MAAAyB,OAAA,EAAZzB,YAAY,CAAA0B,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEP3B,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}