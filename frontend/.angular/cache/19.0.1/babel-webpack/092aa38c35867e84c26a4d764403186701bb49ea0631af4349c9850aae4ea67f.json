{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/conta.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ContaComponent_li_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 3);\n    i0.ɵɵlistener(\"click\", function ContaComponent_li_15_Template_li_click_0_listener() {\n      const conta_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.selecionarConta(conta_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"currency\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const conta_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"selected\", conta_r2 === ctx_r2.contaSelecionada);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", conta_r2.nomeTitular, \" - Saldo: \", i0.ɵɵpipeBind1(2, 4, conta_r2.saldo), \" \");\n  }\n}\nfunction ContaComponent_div_16_div_15_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Tipo:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵelementStart(5, \"strong\");\n    i0.ɵɵtext(6, \"Valor:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7);\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵelementStart(9, \"strong\");\n    i0.ɵɵtext(10, \"Data da Transa\\u00E7\\u00E3o:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const transacao_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", transacao_r5.tipo, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", transacao_r5.valor, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(12, 3, transacao_r5.dataTransacao, \"dd/MM/yyyy HH:mm:ss\"), \" \");\n  }\n}\nfunction ContaComponent_div_16_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\");\n    i0.ɵɵtemplate(2, ContaComponent_div_16_div_15_li_2_Template, 13, 6, \"li\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.extrato);\n  }\n}\nfunction ContaComponent_div_16_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Nenhuma transa\\u00E7\\u00E3o encontrada.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ContaComponent_div_16_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3, \"Saldo Atual:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(5, 1, ctx_r2.contaSelecionada.saldo), \"\");\n  }\n}\nfunction ContaComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"h4\");\n    i0.ɵɵtext(5, \"Realizar Dep\\u00F3sito\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 7);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_16_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.valor, $event) || (ctx_r2.valor = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_16_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.realizarDeposito());\n    });\n    i0.ɵɵtext(8, \"Depositar\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\")(10, \"h4\");\n    i0.ɵɵtext(11, \"Realizar Saque\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"input\", 8);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_16_Template_input_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.valor, $event) || (ctx_r2.valor = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_16_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.realizarSaque());\n    });\n    i0.ɵɵtext(14, \"Sacar\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(15, ContaComponent_div_16_div_15_Template, 3, 1, \"div\", 5)(16, ContaComponent_div_16_div_16_Template, 3, 0, \"div\", 5);\n    i0.ɵɵelementStart(17, \"div\")(18, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_16_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.carregarDetalhesConta());\n    });\n    i0.ɵɵtext(19, \"Carregar Detalhes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(20, ContaComponent_div_16_div_20_Template, 6, 3, \"div\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Detalhes da Conta: \", ctx_r2.contaSelecionada.nomeTitular, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.valor);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.valor);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.extrato && ctx_r2.extrato.length > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.extrato && ctx_r2.extrato.length === 0);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contaSelecionada);\n  }\n}\nfunction ContaComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"p\");\n    i0.ɵɵtext(2, \"Ocorreu um erro ao carregar as contas. Tente novamente.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let ContaComponent = /*#__PURE__*/(() => {\n  class ContaComponent {\n    contaService;\n    contas = [];\n    contaSelecionada = null;\n    nomeTitular = '';\n    valor = 0;\n    mostrarExtrato = false;\n    extrato = [];\n    erro = false;\n    constructor(contaService) {\n      this.contaService = contaService;\n    }\n    ngOnInit() {\n      this.listarContas();\n    }\n    listarContas() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado! Faça login para listar as contas.');\n        return;\n      }\n      this.contaService.listarContasPorUsuario().subscribe({\n        next: dados => {\n          console.log('Contas retornadas pelo backend:', dados);\n          // Verifica se o retorno é um objeto único ou um array\n          if (Array.isArray(dados)) {\n            this.contas = dados;\n          } else {\n            this.contas = [dados]; // Converte o objeto único em um array\n          }\n          this.erro = false;\n        },\n        error: err => {\n          console.error('Erro ao listar contas:', err);\n          this.erro = true;\n          alert('Não foi possível listar as contas.');\n        }\n      });\n    }\n    selecionarConta(conta) {\n      this.contaSelecionada = conta;\n      this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\n    }\n    criarConta() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado!');\n        return;\n      }\n      if (!this.nomeTitular.trim()) {\n        alert('Informe o nome do titular para criar a conta.');\n        return;\n      }\n      this.contaService.criarConta({\n        nomeTitular: this.nomeTitular\n      }, +idUsuario).subscribe({\n        next: novaConta => {\n          console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\n          alert('Conta criada com sucesso!');\n          if (novaConta) {\n            this.contas.push(novaConta); // Adiciona a nova conta à lista\n            this.selecionarConta(novaConta); // Seleciona a conta automaticamente\n          } else {\n            console.error('Erro: A resposta da API não contém uma conta válida.');\n          }\n        },\n        error: err => {\n          console.error('Erro ao criar conta:', err);\n          alert('Erro ao criar a conta.');\n        }\n      });\n    }\n    realizarDeposito() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para depósito.');\n        return;\n      }\n      this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Depósito realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar depósito:', err);\n          alert('Erro ao realizar depósito. Tente novamente.');\n        }\n      });\n    }\n    realizarSaque() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para saque.');\n        return;\n      }\n      this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Saque realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar saque:', err);\n          alert('Erro ao realizar saque. Tente novamente.');\n        }\n      });\n    }\n    carregarExtrato() {\n      if (!this.contaSelecionada) {\n        alert('Selecione uma conta para visualizar o extrato.');\n        return;\n      }\n      this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n        next: extrato => {\n          this.extrato = extrato;\n        },\n        error: err => {\n          console.error('Erro ao carregar extrato:', err);\n          alert('Erro ao carregar o extrato.');\n        }\n      });\n    }\n    carregarDetalhesConta() {\n      if (!this.contaSelecionada) {\n        return;\n      }\n      this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\n        next: contaAtualizada => {\n          this.contaSelecionada = contaAtualizada;\n        },\n        error: err => {\n          console.error('Erro ao carregar detalhes da conta:', err);\n          alert('Erro ao carregar detalhes da conta.');\n        }\n      });\n    }\n    static ɵfac = function ContaComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaComponent)(i0.ɵɵdirectiveInject(i1.ContaService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ContaComponent,\n      selectors: [[\"app-conta\"]],\n      decls: 18,\n      vars: 4,\n      consts: [[1, \"container\"], [\"for\", \"nomeTitular\"], [\"type\", \"text\", \"id\", \"nomeTitular\", \"placeholder\", \"Digite o nome do titular\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\"], [3, \"selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"class\", \"error\", 4, \"ngIf\"], [\"type\", \"number\", \"placeholder\", \"Valor do Dep\\u00F3sito\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"Valor do Saque\", 3, \"ngModelChange\", \"ngModel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"error\"]],\n      template: function ContaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"Gerenciar Contas\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\")(4, \"h3\");\n          i0.ɵɵtext(5, \"Criar Conta\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"label\", 1);\n          i0.ɵɵtext(7, \"Nome do Titular\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 2);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_Template_input_ngModelChange_8_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.nomeTitular, $event) || (ctx.nomeTitular = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function ContaComponent_Template_button_click_9_listener() {\n            return ctx.criarConta();\n          });\n          i0.ɵɵtext(10, \"Criar Conta\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\")(12, \"h3\");\n          i0.ɵɵtext(13, \"Contas Dispon\\u00EDveis\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ul\");\n          i0.ɵɵtemplate(15, ContaComponent_li_15_Template, 3, 6, \"li\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(16, ContaComponent_div_16_Template, 21, 6, \"div\", 5)(17, ContaComponent_div_17_Template, 3, 0, \"div\", 6);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.nomeTitular);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.contas);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.contaSelecionada);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.erro);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, i2.CurrencyPipe, i2.DatePipe, FormsModule, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ContaComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵlistener","ContaComponent_li_15_Template_li_click_0_listener","conta_r2","ɵɵrestoreView","_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","selecionarConta","ɵɵtext","ɵɵelementEnd","ɵɵclassProp","contaSelecionada","ɵɵadvance","ɵɵtextInterpolate2","nomeTitular","ɵɵpipeBind1","saldo","ɵɵelement","ɵɵtextInterpolate1","transacao_r5","tipo","valor","ɵɵpipeBind2","dataTransacao","ɵɵtemplate","ContaComponent_div_16_div_15_li_2_Template","ɵɵproperty","extrato","ɵɵtwoWayListener","ContaComponent_div_16_Template_input_ngModelChange_6_listener","$event","_r4","ɵɵtwoWayBindingSet","ContaComponent_div_16_Template_button_click_7_listener","realizarDeposito","ContaComponent_div_16_Template_input_ngModelChange_12_listener","ContaComponent_div_16_Template_button_click_13_listener","realizarSaque","ContaComponent_div_16_div_15_Template","ContaComponent_div_16_div_16_Template","ContaComponent_div_16_Template_button_click_18_listener","carregarDetalhesConta","ContaComponent_div_16_div_20_Template","ɵɵtwoWayProperty","length","ContaComponent","contaService","contas","mostrarExtrato","erro","constructor","ngOnInit","listarContas","idUsuario","localStorage","getItem","alert","listarContasPorUsuario","subscribe","next","dados","console","log","Array","isArray","error","err","conta","criarConta","trim","novaConta","push","idConta","contaAtualizada","carregarExtrato","getExtrato","obterDetalhesConta","ɵɵdirectiveInject","i1","ContaService","selectors","decls","vars","consts","template","ContaComponent_Template","rf","ctx","ContaComponent_Template_input_ngModelChange_8_listener","ContaComponent_Template_button_click_9_listener","ContaComponent_li_15_Template","ContaComponent_div_16_Template","ContaComponent_div_17_Template","i2","NgForOf","NgIf","CurrencyPipe","DatePipe","i3","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgModel","styles"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts","C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  contas: ContaDTO[] = [];\r\n  contaSelecionada: ContaDTO | null = null;\r\n  nomeTitular: string = '';\r\n  valor: number = 0;\r\n  mostrarExtrato: boolean = false;\r\n  extrato: any[] = [];\r\n  erro: boolean = false;\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.listarContas();\r\n  }\r\n\r\n  listarContas(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado! Faça login para listar as contas.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.listarContasPorUsuario().subscribe({\r\n      next: (dados: ContaDTO | ContaDTO[]) => {\r\n        console.log('Contas retornadas pelo backend:', dados);\r\n  \r\n        // Verifica se o retorno é um objeto único ou um array\r\n        if (Array.isArray(dados)) {\r\n          this.contas = dados;\r\n        } else {\r\n          this.contas = [dados]; // Converte o objeto único em um array\r\n        }\r\n  \r\n        this.erro = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas:', err);\r\n        this.erro = true;\r\n        alert('Não foi possível listar as contas.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  selecionarConta(conta: ContaDTO): void {\r\n    this.contaSelecionada = conta;\r\n    this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\r\n  }\r\n\r\n  criarConta(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n  \r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\r\n      next: (novaConta: ContaDTO) => {\r\n        console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\r\n        alert('Conta criada com sucesso!');\r\n        if (novaConta) {\r\n          this.contas.push(novaConta);  // Adiciona a nova conta à lista\r\n          this.selecionarConta(novaConta);  // Seleciona a conta automaticamente\r\n        } else {\r\n          console.error('Erro: A resposta da API não contém uma conta válida.');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao criar conta:', err);\r\n        alert('Erro ao criar a conta.');\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  realizarDeposito(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar depósito:', err);\r\n        alert('Erro ao realizar depósito. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  realizarSaque(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar saque:', err);\r\n        alert('Erro ao realizar saque. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  carregarExtrato(): void {\r\n    if (!this.contaSelecionada) {\r\n      alert('Selecione uma conta para visualizar o extrato.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n      next: (extrato) => {\r\n        this.extrato = extrato;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar extrato:', err);\r\n        alert('Erro ao carregar o extrato.');\r\n      },\r\n    });\r\n  }\r\n\r\n  carregarDetalhesConta(): void {\r\n    if (!this.contaSelecionada) {\r\n      return;\r\n    }\r\n\r\n    this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\r\n      next: (contaAtualizada) => {\r\n        this.contaSelecionada = contaAtualizada;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar detalhes da conta:', err);\r\n        alert('Erro ao carregar detalhes da conta.');\r\n      },\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <!-- Título e nome do usuário -->\r\n  <h1>Gerenciar Contas</h1>\r\n\r\n  <!-- Formulário para criar conta -->\r\n  <div>\r\n    <h3>Criar Conta</h3>\r\n    <label for=\"nomeTitular\">Nome do Titular</label>\r\n    <input type=\"text\" id=\"nomeTitular\" [(ngModel)]=\"nomeTitular\" placeholder=\"Digite o nome do titular\" />\r\n    <button (click)=\"criarConta()\">Criar Conta</button>\r\n  </div>\r\n\r\n  <!-- Listagem de contas -->\r\n  <div>\r\n    <h3>Contas Disponíveis</h3>\r\n    <ul>\r\n      <li *ngFor=\"let conta of contas\" (click)=\"selecionarConta(conta)\" [class.selected]=\"conta === contaSelecionada\">\r\n        {{ conta.nomeTitular }} - Saldo: {{ conta.saldo | currency }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- Se uma conta for selecionada -->\r\n  <div *ngIf=\"contaSelecionada\">\r\n    <h3>Detalhes da Conta: {{ contaSelecionada.nomeTitular }}</h3>\r\n\r\n    <!-- Depósito -->\r\n    <div>\r\n      <h4>Realizar Depósito</h4>\r\n      <input type=\"number\" [(ngModel)]=\"valor\" placeholder=\"Valor do Depósito\" />\r\n      <button (click)=\"realizarDeposito()\">Depositar</button>\r\n    </div>\r\n\r\n    <!-- Saque -->\r\n    <div>\r\n      <h4>Realizar Saque</h4>\r\n      <input type=\"number\" [(ngModel)]=\"valor\" placeholder=\"Valor do Saque\" />\r\n      <button (click)=\"realizarSaque()\">Sacar</button>\r\n    </div>\r\n\r\n   <!-- Exibir o extrato das transações -->\r\n<div *ngIf=\"extrato && extrato.length > 0\">\r\n  <ul>\r\n    <li *ngFor=\"let transacao of extrato\">\r\n      <strong>Tipo:</strong> {{ transacao.tipo }} <br>\r\n      <strong>Valor:</strong> {{ transacao.valor }} <br>\r\n      <strong>Data da Transação:</strong> {{ transacao.dataTransacao | date:'dd/MM/yyyy HH:mm:ss' }} <!-- Formatação da data -->\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<!-- Caso o extrato esteja vazio -->\r\n<div *ngIf=\"extrato && extrato.length === 0\">\r\n  <p>Nenhuma transação encontrada.</p>\r\n</div>\r\n\r\n    <!-- Detalhes da conta -->\r\n    <div>\r\n      <button (click)=\"carregarDetalhesConta()\">Carregar Detalhes</button>\r\n      <div *ngIf=\"contaSelecionada\">\r\n        <p><strong>Saldo Atual:</strong> {{ contaSelecionada.saldo | currency }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Exibição de erros -->\r\n  <div *ngIf=\"erro\" class=\"error\">\r\n    <p>Ocorreu um erro ao carregar as contas. Tente novamente.</p>\r\n  </div>\r\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}