{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/conta.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ContaComponent_div_2_div_9_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(item_r3);\n  }\n}\nfunction ContaComponent_div_2_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Extrato\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, ContaComponent_div_2_div_9_li_4_Template, 2, 1, \"li\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.extrato);\n  }\n}\nfunction ContaComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 1);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_2_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.valor, $event) || (ctx_r1.valor = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.realizarDeposito());\n    });\n    i0.ɵɵtext(6, \"Depositar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_2_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.realizarSaque());\n    });\n    i0.ɵɵtext(8, \"Sacar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, ContaComponent_div_2_div_9_Template, 5, 1, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Saldo: \", i0.ɵɵpipeBind1(3, 3, ctx_r1.saldo), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.valor);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mostrarExtrato);\n  }\n}\nfunction ContaComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Criar Conta\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 4);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_3_Template_input_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.nomeTitular, $event) || (ctx_r1.nomeTitular = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_3_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.criarConta());\n    });\n    i0.ɵɵtext(5, \"Criar Conta\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.nomeTitular);\n  }\n}\nexport let ContaComponent = /*#__PURE__*/(() => {\n  class ContaComponent {\n    contaService;\n    idConta = null;\n    nomeTitular = '';\n    saldo = 0;\n    extrato = [];\n    valor = 0; // Variável para armazenar o valor do depósito ou saque\n    mostrarExtrato = false;\n    contas = []; // Variável para armazenar a lista de contas\n    constructor(contaService) {\n      this.contaService = contaService;\n    }\n    ngOnInit() {\n      if (this.idConta) {\n        this.atualizarSaldo();\n        this.atualizarExtrato();\n      }\n    }\n    criarConta() {\n      if (this.nomeTitular.trim() === '') {\n        alert('Preencha o nome do titular para criar uma conta.');\n        return;\n      }\n      const contaDTO = {\n        nomeTitular: this.nomeTitular,\n        status: 'true'\n      };\n      const idUsuario = 1; // Substitua pelo ID real ou obtenha dinamicamente\n      this.contaService.criarConta(contaDTO, idUsuario).subscribe({\n        next: conta => {\n          this.idConta = conta.idConta;\n          this.saldo = conta.saldo;\n          alert('Conta criada com sucesso!');\n          this.atualizarExtrato();\n        },\n        error: err => {\n          console.error('Erro ao criar conta', err);\n          alert('Erro ao criar conta. Tente novamente.');\n        }\n      });\n    }\n    // Novo método para listar as contas do usuário\n    listarContas() {\n      const idUsuario = 1; // Substitua pelo ID real ou obtenha dinamicamente\n      this.contaService.listarContas(idUsuario).subscribe({\n        next: contas => {\n          this.contas = contas;\n        },\n        error: err => {\n          console.error('Erro ao listar contas', err);\n          alert('Erro ao listar contas. Tente novamente.');\n        }\n      });\n    }\n    // Método para realizar o depósito\n    realizarDeposito() {\n      if (!this.idConta || this.valor <= 0) {\n        alert('Informe um valor válido para depósito.');\n        return;\n      }\n      this.contaService.realizarDeposito(this.idConta, this.valor).subscribe({\n        next: () => {\n          alert('Depósito realizado com sucesso!');\n          this.atualizarSaldo();\n          this.atualizarExtrato();\n          this.valor = 0; // Limpar o campo de valor após o depósito\n        },\n        error: () => alert('Erro ao realizar depósito. Tente novamente.')\n      });\n    }\n    // Método para realizar o saque\n    realizarSaque() {\n      if (!this.idConta || this.valor <= 0) {\n        alert('Informe um valor válido para saque.');\n        return;\n      }\n      this.contaService.realizarSaque(this.idConta, this.valor).subscribe({\n        next: () => {\n          alert('Saque realizado com sucesso!');\n          this.atualizarSaldo();\n          this.atualizarExtrato();\n          this.valor = 0; // Limpar o campo de valor após o saque\n        },\n        error: err => {\n          alert('Erro ao realizar saque. Tente novamente.');\n          console.error(err);\n        }\n      });\n    }\n    // Método para atualizar o saldo\n    atualizarSaldo() {\n      if (this.idConta) {\n        this.contaService.getSaldo(this.idConta).subscribe({\n          next: saldo => this.saldo = saldo,\n          error: err => console.error('Erro ao obter saldo:', err)\n        });\n      }\n    }\n    // Método para atualizar o extrato\n    atualizarExtrato() {\n      if (this.idConta) {\n        this.contaService.getExtrato(this.idConta).subscribe({\n          next: extrato => this.extrato = extrato,\n          error: err => console.error('Erro ao obter extrato:', err)\n        });\n      }\n    }\n    static ɵfac = function ContaComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaComponent)(i0.ɵɵdirectiveInject(i1.ContaService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ContaComponent,\n      selectors: [[\"app-conta\"]],\n      decls: 4,\n      vars: 2,\n      consts: [[4, \"ngIf\"], [\"placeholder\", \"Digite o valor\", \"type\", \"number\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Nome do Titular\", 3, \"ngModelChange\", \"ngModel\"]],\n      template: function ContaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Conta Banc\\u00E1ria\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, ContaComponent_div_2_Template, 10, 5, \"div\", 0)(3, ContaComponent_div_3_Template, 6, 1, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.idConta);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.idConta);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, i2.CurrencyPipe, FormsModule, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ContaComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","item_r3","ɵɵtemplate","ContaComponent_div_2_div_9_li_4_Template","ɵɵproperty","ctx_r1","extrato","ɵɵtwoWayListener","ContaComponent_div_2_Template_input_ngModelChange_4_listener","$event","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵtwoWayBindingSet","valor","ɵɵresetView","ɵɵlistener","ContaComponent_div_2_Template_button_click_5_listener","realizarDeposito","ContaComponent_div_2_Template_button_click_7_listener","realizarSaque","ContaComponent_div_2_div_9_Template","ɵɵtextInterpolate1","ɵɵpipeBind1","saldo","ɵɵtwoWayProperty","mostrarExtrato","ContaComponent_div_3_Template_input_ngModelChange_3_listener","_r4","nomeTitular","ContaComponent_div_3_Template_button_click_4_listener","criarConta","ContaComponent","contaService","idConta","contas","constructor","ngOnInit","atualizarSaldo","atualizarExtrato","trim","alert","contaDTO","status","idUsuario","subscribe","next","conta","error","err","console","listarContas","getSaldo","getExtrato","ɵɵdirectiveInject","i1","ContaService","selectors","decls","vars","consts","template","ContaComponent_Template","rf","ctx","ContaComponent_div_2_Template","ContaComponent_div_3_Template","i2","NgForOf","NgIf","CurrencyPipe","i3","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgModel","styles"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\conta-component\\conta-component.component.ts","C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\conta-component\\conta-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule], // Adicionado aqui\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  idConta: number | null = null;\r\n  nomeTitular: string = '';\r\n  saldo: number = 0;\r\n  extrato: any[] = [];\r\n  valor: number = 0;  // Variável para armazenar o valor do depósito ou saque\r\n  mostrarExtrato: boolean = false;\r\n  contas: any[] = []; // Variável para armazenar a lista de contas\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.idConta) {\r\n      this.atualizarSaldo();\r\n      this.atualizarExtrato();\r\n    }\r\n  }\r\n\r\n  criarConta(): void {\r\n    if (this.nomeTitular.trim() === '') {\r\n      alert('Preencha o nome do titular para criar uma conta.');\r\n      return;\r\n    }\r\n\r\n    const contaDTO = {\r\n      nomeTitular: this.nomeTitular,\r\n      status: 'true',\r\n    };\r\n\r\n    const idUsuario = 1; // Substitua pelo ID real ou obtenha dinamicamente\r\n\r\n    this.contaService.criarConta(contaDTO, idUsuario).subscribe({\r\n      next: (conta: any) => {\r\n        this.idConta = conta.idConta;\r\n        this.saldo = conta.saldo;\r\n        alert('Conta criada com sucesso!');\r\n        this.atualizarExtrato();\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao criar conta', err);\r\n        alert('Erro ao criar conta. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n  // Novo método para listar as contas do usuário\r\n  listarContas(): void {\r\n    const idUsuario = 1; // Substitua pelo ID real ou obtenha dinamicamente\r\n    this.contaService.listarContas(idUsuario).subscribe({\r\n      next: (contas: any[]) => {\r\n        this.contas = contas;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas', err);\r\n        alert('Erro ao listar contas. Tente novamente.');\r\n      }\r\n    });\r\n  }\r\n  // Método para realizar o depósito\r\n  realizarDeposito(): void {\r\n    if (!this.idConta || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarDeposito(this.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.atualizarSaldo();\r\n        this.atualizarExtrato();\r\n        this.valor = 0; // Limpar o campo de valor após o depósito\r\n      },\r\n      error: () => alert('Erro ao realizar depósito. Tente novamente.')\r\n    });\r\n  }\r\n\r\n  // Método para realizar o saque\r\nrealizarSaque(): void {\r\n  if (!this.idConta || this.valor <= 0) {\r\n    alert('Informe um valor válido para saque.');\r\n    return;\r\n  }\r\n\r\n  this.contaService.realizarSaque(this.idConta, this.valor).subscribe({\r\n    next: () => {\r\n      alert('Saque realizado com sucesso!');\r\n      this.atualizarSaldo();\r\n      this.atualizarExtrato();\r\n      this.valor = 0;  // Limpar o campo de valor após o saque\r\n    },\r\n    error: (err) => {\r\n      alert('Erro ao realizar saque. Tente novamente.');\r\n      console.error(err);\r\n    }\r\n  });\r\n}\r\n\r\n  // Método para atualizar o saldo\r\n  private atualizarSaldo(): void {\r\n    if (this.idConta) {\r\n      this.contaService.getSaldo(this.idConta).subscribe({\r\n        next: (saldo) => (this.saldo = saldo),\r\n        error: (err) => console.error('Erro ao obter saldo:', err),\r\n      });\r\n    }\r\n  }\r\n\r\n  // Método para atualizar o extrato\r\n  private atualizarExtrato(): void {\r\n    if (this.idConta) {\r\n      this.contaService.getExtrato(this.idConta).subscribe({\r\n        next: (extrato) => (this.extrato = extrato),\r\n        error: (err) => console.error('Erro ao obter extrato:', err),\r\n      });\r\n    }\r\n  }\r\n}\r\n","<h1>Conta Bancária</h1>\r\n\r\n<!-- Exibe a conta após ser criada -->\r\n<div *ngIf=\"idConta\">\r\n  <p>Saldo: {{ saldo | currency }}</p>\r\n\r\n  <!-- Campo para valor de depósito ou saque -->\r\n  <input [(ngModel)]=\"valor\" placeholder=\"Digite o valor\" type=\"number\" />\r\n\r\n  <!-- Botões para depósito e saque -->\r\n  <button (click)=\"realizarDeposito()\">Depositar</button>\r\n  <button (click)=\"realizarSaque()\">Sacar</button>\r\n\r\n  <!-- Exibe o extrato -->\r\n  <div *ngIf=\"mostrarExtrato\">\r\n    <h2>Extrato</h2>\r\n    <ul>\r\n      <li *ngFor=\"let item of extrato\">{{ item }}</li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n<!-- Exibe o formulário para criar conta -->\r\n<div *ngIf=\"!idConta\">\r\n  <h2>Criar Conta</h2>\r\n  <input [(ngModel)]=\"nomeTitular\" placeholder=\"Nome do Titular\" />\r\n  <button (click)=\"criarConta()\">Criar Conta</button>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}