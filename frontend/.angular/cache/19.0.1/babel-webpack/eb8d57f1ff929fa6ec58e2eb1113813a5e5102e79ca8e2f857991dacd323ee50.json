{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    http;\n    userService;\n    apiUrl = 'http://localhost:8080/api/usuarios'; // URL da API\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n    }\n    // Método para criar o usuário\n    criarUsuario(usuarioDTO) {\n      return this.http.post(this.apiUrl, usuarioDTO).pipe(\n      // Salva o id do usuário no UserService após criação\n      tap(usuario => {\n        this.userService.salvarIdUsuario(usuario.id); // Armazena o id do usuário\n      }));\n    }\n    // Método para buscar um usuário por e-mail\n    buscarUsuarioPorEmail(email) {\n      return this.http.get(`${this.apiUrl}/${email}`);\n    }\n    static ɵfac = function UsuarioService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UsuarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsuarioService,\n      factory: UsuarioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UsuarioService;\n})();","map":{"version":3,"names":["tap","UsuarioService","http","userService","apiUrl","constructor","criarUsuario","usuarioDTO","post","pipe","usuario","salvarIdUsuario","id","buscarUsuarioPorEmail","email","get","i0","ɵɵinject","i1","HttpClient","i2","UserService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { UserService } from './user.service'; // Importa o UserService\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsuarioService {\r\n  private apiUrl = 'http://localhost:8080/api/usuarios'; // URL da API\r\n\r\n  constructor(private http: HttpClient, private userService: UserService) {}\r\n\r\n  // Método para criar o usuário\r\n  criarUsuario(usuarioDTO: { email: string; senha: string }): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, usuarioDTO).pipe(\r\n      // Salva o id do usuário no UserService após criação\r\n      tap((usuario) => {\r\n        this.userService.salvarIdUsuario(usuario.id); // Armazena o id do usuário\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para buscar um usuário por e-mail\r\n  buscarUsuarioPorEmail(email: string): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/${email}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAMtC,WAAaC,cAAc;EAArB,MAAOA,cAAc;IAGLC,IAAA;IAA0BC,WAAA;IAFtCC,MAAM,GAAG,oCAAoC,CAAC,CAAC;IAEvDC,YAAoBH,IAAgB,EAAUC,WAAwB;MAAlD,KAAAD,IAAI,GAAJA,IAAI;MAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAgB;IAEzE;IACAG,YAAYA,CAACC,UAA4C;MACvD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACJ,MAAM,EAAEG,UAAU,CAAC,CAACE,IAAI;MACtD;MACAT,GAAG,CAAEU,OAAO,IAAI;QACd,IAAI,CAACP,WAAW,CAACQ,eAAe,CAACD,OAAO,CAACE,EAAE,CAAC,CAAC,CAAC;MAChD,CAAC,CAAC,CACH;IACH;IAEA;IACAC,qBAAqBA,CAACC,KAAa;MACjC,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACX,MAAM,IAAIU,KAAK,EAAE,CAAC;IACjD;;uCAlBWb,cAAc,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;;aAAdpB,cAAc;MAAAqB,OAAA,EAAdrB,cAAc,CAAAsB,IAAA;MAAAC,UAAA,EAFb;IAAM;;SAEPvB,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}