{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/usuario.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    usuarioService;\n    router;\n    email = '';\n    senha = '';\n    constructor(usuarioService, router) {\n      this.usuarioService = usuarioService;\n      this.router = router;\n    }\n    // Método para cadastrar usuário\n    cadastrar() {\n      if (!this.email || !this.senha) {\n        alert('Preencha todos os campos!');\n        return;\n      }\n      const usuarioDTO = {\n        email: this.email,\n        senha: this.senha\n      };\n      this.usuarioService.criarUsuario(usuarioDTO).subscribe({\n        next: usuario => {\n          console.log('Usuário cadastrado:', usuario); // Verifique os dados retornados\n          if (usuario.id) {\n            localStorage.setItem('idUsuario', usuario.id.toString()); // Armazenando o id do usuário no localStorage\n            alert('Cadastro realizado com sucesso!');\n            this.router.navigate(['/conta']);\n          } else {\n            alert('Erro: id não encontrado na resposta');\n          }\n        },\n        error: err => {\n          console.error('Erro ao cadastrar usuário', err);\n          alert('Erro ao realizar o cadastro. Tente novamente.');\n        }\n      });\n    }\n    // Método para realizar login\n    login() {\n      if (!this.email || !this.senha) {\n        alert('Preencha todos os campos!');\n        return;\n      }\n      this.usuarioService.buscarUsuarioPorEmail(this.email).subscribe({\n        next: usuario => {\n          // Validando senha\n          if (usuario.senha === this.senha) {\n            console.log('Usuário encontrado:', usuario); // Verifique os dados retornados\n            if (usuario.id) {\n              localStorage.setItem('idUsuario', usuario.id.toString()); // Armazenando o id do usuário no localStorage\n              alert('Login realizado com sucesso!');\n              this.router.navigate(['/conta']);\n            } else {\n              alert('Erro: id não encontrado na resposta');\n            }\n          } else {\n            alert('Senha incorreta.');\n          }\n        },\n        error: err => {\n          console.error('Erro ao buscar usuário', err);\n          alert('Usuário não encontrado.');\n        }\n      });\n    }\n    static ɵfac = function HomeComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HomeComponent)(i0.ɵɵdirectiveInject(i1.UsuarioService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HomeComponent,\n      selectors: [[\"app-home\"]],\n      decls: 17,\n      vars: 2,\n      consts: [[3, \"ngSubmit\"], [\"for\", \"email\"], [\"id\", \"email\", \"name\", \"email\", \"type\", \"email\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"senha\"], [\"id\", \"senha\", \"name\", \"senha\", \"type\", \"password\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\"], [\"routerLink\", \"/conta\"]],\n      template: function HomeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Bem-vindo ao Banco\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.cadastrar();\n          });\n          i0.ɵɵelementStart(3, \"label\", 1);\n          i0.ɵɵtext(4, \"Email:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"input\", 2);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.email, $event) || (ctx.email = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Senha:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 4);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_8_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.senha, $event) || (ctx.senha = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_9_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵtext(10, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 6);\n          i0.ɵɵtext(12, \"Cadastrar\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"h1\");\n          i0.ɵɵtext(14, \"Bem-vindo ao Banco\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"a\", 7);\n          i0.ɵɵtext(16, \"Ir para Conta\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.email);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.senha);\n        }\n      },\n      dependencies: [FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return HomeComponent;\n})();","map":{"version":3,"names":["FormsModule","HomeComponent","usuarioService","router","email","senha","constructor","cadastrar","alert","usuarioDTO","criarUsuario","subscribe","next","usuario","console","log","id","localStorage","setItem","toString","navigate","error","err","login","buscarUsuarioPorEmail","i0","ɵɵdirectiveInject","i1","UsuarioService","i2","Router","selectors","decls","vars","consts","template","HomeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","HomeComponent_Template_form_ngSubmit_2_listener","ɵɵtwoWayListener","HomeComponent_Template_input_ngModelChange_5_listener","$event","ɵɵtwoWayBindingSet","HomeComponent_Template_input_ngModelChange_8_listener","HomeComponent_Template_button_click_9_listener","ɵɵadvance","ɵɵtwoWayProperty","i3","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","NgModel","NgForm","styles"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\home\\home.component.ts","C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { UsuarioService } from '../services/usuario.service';\r\nimport { Usuario } from '../usuario.model'; // Importando a interface\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css'],\r\n  imports: [FormsModule],\r\n})\r\nexport class HomeComponent {\r\n  email: string = '';\r\n  senha: string = '';\r\n\r\n  constructor(\r\n    private usuarioService: UsuarioService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  // Método para cadastrar usuário\r\n  cadastrar(): void {\r\n    if (!this.email || !this.senha) {\r\n      alert('Preencha todos os campos!');\r\n      return;\r\n    }\r\n\r\n    const usuarioDTO = {\r\n      email: this.email,\r\n      senha: this.senha,\r\n    };\r\n\r\n    this.usuarioService.criarUsuario(usuarioDTO).subscribe({\r\n      next: (usuario: Usuario) => {  \r\n        console.log('Usuário cadastrado:', usuario); // Verifique os dados retornados\r\n        if (usuario.id) {\r\n          localStorage.setItem('idUsuario', usuario.id.toString()); // Armazenando o id do usuário no localStorage\r\n          alert('Cadastro realizado com sucesso!');\r\n          this.router.navigate(['/conta']);\r\n        } else {\r\n          alert('Erro: id não encontrado na resposta');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao cadastrar usuário', err);\r\n        alert('Erro ao realizar o cadastro. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n\r\n  // Método para realizar login\r\n  login(): void {\r\n    if (!this.email || !this.senha) {\r\n      alert('Preencha todos os campos!');\r\n      return;\r\n    }\r\n\r\n    this.usuarioService.buscarUsuarioPorEmail(this.email).subscribe({\r\n      next: (usuario: Usuario) => {\r\n        // Validando senha\r\n        if (usuario.senha === this.senha) {\r\n          console.log('Usuário encontrado:', usuario); // Verifique os dados retornados\r\n          if (usuario.id) {\r\n            localStorage.setItem('idUsuario', usuario.id.toString()); // Armazenando o id do usuário no localStorage\r\n            alert('Login realizado com sucesso!');\r\n            this.router.navigate(['/conta']);\r\n          } else {\r\n            alert('Erro: id não encontrado na resposta');\r\n          }\r\n        } else {\r\n          alert('Senha incorreta.');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao buscar usuário', err);\r\n        alert('Usuário não encontrado.');\r\n      },\r\n    });\r\n  }\r\n}\r\n","<h1>Bem-vindo ao Banco</h1>\r\n<form (ngSubmit)=\"cadastrar()\">\r\n  <label for=\"email\">Email:</label>\r\n  <input id=\"email\" [(ngModel)]=\"email\" name=\"email\" type=\"email\" required />\r\n\r\n  <label for=\"senha\">Senha:</label>\r\n  <input id=\"senha\" [(ngModel)]=\"senha\" name=\"senha\" type=\"password\" required />\r\n\r\n  <button type=\"button\" (click)=\"login()\">Login</button>\r\n  <button type=\"submit\">Cadastrar</button>\r\n</form>\r\n<h1>Bem-vindo ao Banco</h1>\r\n<a routerLink=\"/conta\">Ir para Conta</a>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}