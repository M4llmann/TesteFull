{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    userService;\n    apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n    }\n    // Método para criar conta, utilizando o id do usuário armazenado\n    criarConta(contaDTO) {\n      const idUsuario = this.userService.getIdUsuario();\n      if (idUsuario === null) {\n        throw new Error('Usuário não está logado');\n      }\n      return this.http.post(`${this.apiUrl}/${idUsuario}`, contaDTO);\n    }\n    // Método para listar todas as contas de um usuário\n    listarContas(idsContas) {\n      if (idsContas.length === 0) {\n        return of([]); // Retorna um Observable com um array vazio\n      }\n      // Realiza múltiplas requisições HTTP para cada ID de conta\n      const requisicoes = idsContas.map(idConta => this.http.get(`${this.apiUrl}/conta/${idConta}`));\n      // Combina os resultados das requisições em um único array\n      return forkJoin(requisicoes);\n    }\n    realizarDeposito(idConta, valor) {\n      // Ajustar para enviar o valor como query parameter\n      const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\n      return this.http.post(url, {}); // Corpo vazio\n    }\n    realizarSaque(idConta, valor) {\n      // Ajustar para enviar o valor como query parameter\n      const url = `${this.apiUrl}/${idConta}/saque?valor=${valor}`;\n      return this.http.post(url, {}); // Corpo vazio\n    }\n    getSaldo(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/saldo`);\n    }\n    getExtrato(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["ContaService","http","userService","apiUrl","constructor","criarConta","contaDTO","idUsuario","getIdUsuario","Error","post","listarContas","idsContas","length","of","requisicoes","map","idConta","get","forkJoin","realizarDeposito","valor","url","realizarSaque","getSaldo","getExtrato","i0","ɵɵinject","i1","HttpClient","i2","UserService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\nimport { UserService } from './user.service'; // Importa o UserService\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\r\n\r\n  constructor(private http: HttpClient, private userService: UserService) {}\r\n\r\n  // Método para criar conta, utilizando o id do usuário armazenado\r\n  criarConta(contaDTO: { nomeTitular: string; status: string }): Observable<ContaDTO> {\r\n    const idUsuario = this.userService.getIdUsuario();\r\n    if (idUsuario === null) {\r\n      throw new Error('Usuário não está logado');\r\n    }\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idUsuario}`, contaDTO);\r\n  }\r\n\r\n// Método para listar todas as contas de um usuário\r\nlistarContas(idsContas: number[]): Observable<ContaDTO[]> {\r\n  if (idsContas.length === 0) {\r\n    return of([]); // Retorna um Observable com um array vazio\r\n  }\r\n\r\n  // Realiza múltiplas requisições HTTP para cada ID de conta\r\n  const requisicoes = idsContas.map((idConta) =>\r\n    this.http.get<ContaDTO>(`${this.apiUrl}/conta/${idConta}`)\r\n  );\r\n\r\n  // Combina os resultados das requisições em um único array\r\n  return forkJoin(requisicoes);\r\n}\r\n\r\n  \r\n\r\n  realizarDeposito(idConta: number, valor: number): Observable<any> {\r\n    // Ajustar para enviar o valor como query parameter\r\n    const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\r\n    return this.http.post(url, {}); // Corpo vazio\r\n  }\r\n\r\n  realizarSaque(idConta: number, valor: number): Observable<any> {\r\n    // Ajustar para enviar o valor como query parameter\r\n    const url = `${this.apiUrl}/${idConta}/saque?valor=${valor}`;\r\n    return this.http.post(url, {}); // Corpo vazio\r\n  }\r\n\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":";;;AASA,WAAaA,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAA0BC,WAAA;IAFtCC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IAErDC,YAAoBH,IAAgB,EAAUC,WAAwB;MAAlD,KAAAD,IAAI,GAAJA,IAAI;MAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAgB;IAEzE;IACAG,UAAUA,CAACC,QAAiD;MAC1D,MAAMC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,YAAY,EAAE;MACjD,IAAID,SAAS,KAAK,IAAI,EAAE;QACtB,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAW,GAAG,IAAI,CAACP,MAAM,IAAII,SAAS,EAAE,EAAED,QAAQ,CAAC;IAC1E;IAEF;IACAK,YAAYA,CAACC,SAAmB;MAC9B,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAOC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB;MAEA;MACA,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,CAAEC,OAAO,IACxC,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAW,GAAG,IAAI,CAACf,MAAM,UAAUc,OAAO,EAAE,CAAC,CAC3D;MAED;MACA,OAAOE,QAAQ,CAACJ,WAAW,CAAC;IAC9B;IAIEK,gBAAgBA,CAACH,OAAe,EAAEI,KAAa;MAC7C;MACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACnB,MAAM,IAAIc,OAAO,mBAAmBI,KAAK,EAAE;MAC/D,OAAO,IAAI,CAACpB,IAAI,CAACS,IAAI,CAACY,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAClC;IAEAC,aAAaA,CAACN,OAAe,EAAEI,KAAa;MAC1C;MACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACnB,MAAM,IAAIc,OAAO,gBAAgBI,KAAK,EAAE;MAC5D,OAAO,IAAI,CAACpB,IAAI,CAACS,IAAI,CAACY,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAClC;IAEAE,QAAQA,CAACP,OAAe;MACtB,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAS,GAAG,IAAI,CAACf,MAAM,IAAIc,OAAO,QAAQ,CAAC;IACjE;IAEAQ,UAAUA,CAACR,OAAe;MACxB,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAQ,GAAG,IAAI,CAACf,MAAM,IAAIc,OAAO,UAAU,CAAC;IAClE;;uCAjDWjB,YAAY,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;;aAAZ/B,YAAY;MAAAgC,OAAA,EAAZhC,YAAY,CAAAiC,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPlC,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}