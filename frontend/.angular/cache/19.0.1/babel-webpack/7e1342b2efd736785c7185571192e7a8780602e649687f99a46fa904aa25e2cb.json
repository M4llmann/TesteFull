{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    baseUrl = 'http://localhost:8080/api/contas'; // URL base do backend\n    constructor(http) {\n      this.http = http;\n    }\n    criarConta(idUsuario, conta) {\n      return this.http.post(`${this.baseUrl}/${idUsuario}`, conta);\n    }\n    buscarConta(idConta) {\n      return this.http.get(`${this.baseUrl}/${idConta}`);\n    }\n    consultarSaldo(idConta) {\n      return this.http.get(`${this.baseUrl}/${idConta}/saldo`);\n    }\n    realizarDeposito(idConta, valor) {\n      return this.http.post(`${this.baseUrl}/${idConta}/deposito`, valor);\n    }\n    realizarSaque(idConta, valor) {\n      return this.http.post(`${this.baseUrl}/${idConta}/saque`, null, {\n        params: {\n          valor: valor.toString()\n        }\n      });\n    }\n    obterExtrato(idConta) {\n      return this.http.get(`${this.baseUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["ContaService","http","baseUrl","constructor","criarConta","idUsuario","conta","post","buscarConta","idConta","get","consultarSaldo","realizarDeposito","valor","realizarSaque","params","toString","obterExtrato","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private baseUrl = 'http://localhost:8080/api/contas'; // URL base do backend\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  criarConta(idUsuario: number, conta: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/${idUsuario}`, conta);\r\n  }\r\n\r\n  buscarConta(idConta: number): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/${idConta}`);\r\n  }\r\n\r\n  consultarSaldo(idConta: number): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  realizarDeposito(idConta: number, valor: number): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/${idConta}/deposito`, valor);\r\n  }\r\n\r\n  realizarSaque(idConta: number, valor: number): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/${idConta}/saque`, null, {\r\n      params: { valor: valor.toString() },\r\n    });\r\n  }\r\n\r\n  obterExtrato(idConta: number): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":";;AAOA,WAAaA,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,OAAO,GAAG,kCAAkC,CAAC,CAAC;IAEtDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCG,UAAUA,CAACC,SAAiB,EAAEC,KAAU;MACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,IAAIG,SAAS,EAAE,EAAEC,KAAK,CAAC;IAC9D;IAEAE,WAAWA,CAACC,OAAe;MACzB,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIO,OAAO,EAAE,CAAC;IACpD;IAEAE,cAAcA,CAACF,OAAe;MAC5B,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIO,OAAO,QAAQ,CAAC;IAC1D;IAEAG,gBAAgBA,CAACH,OAAe,EAAEI,KAAa;MAC7C,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,IAAIO,OAAO,WAAW,EAAEI,KAAK,CAAC;IACrE;IAEAC,aAAaA,CAACL,OAAe,EAAEI,KAAa;MAC1C,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,IAAIO,OAAO,QAAQ,EAAE,IAAI,EAAE;QAC9DM,MAAM,EAAE;UAAEF,KAAK,EAAEA,KAAK,CAACG,QAAQ;QAAE;OAClC,CAAC;IACJ;IAEAC,YAAYA,CAACR,OAAe;MAC1B,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIO,OAAO,UAAU,CAAC;IAC5D;;uCA7BWT,YAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZrB,YAAY;MAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPxB,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}