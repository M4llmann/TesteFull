{"ast":null,"code":"import { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    baseUrl = 'http://localhost:8080/api'; // Substitua pelo URL correto\n    constructor(http) {\n      this.http = http;\n    }\n    criarConta(dadosConta, idUsuario) {\n      return this.http.post(`${this.baseUrl}/contas/${idUsuario}`, dadosConta);\n    }\n    listarContasPorUsuario() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        return throwError(() => new Error('Usuário não encontrado no localStorage'));\n      }\n      return this.http.get(`${this.baseUrl}/contas/${idUsuario}`);\n    }\n    getSaldo(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}/saldo`);\n    }\n    realizarDeposito(idConta, valor) {\n      const url = `${this.baseUrl}/contas/${idConta}/deposito?valor=${valor}`;\n      return this.http.post(url, {}); // Corpo vazio já que o valor está na URL\n    }\n    realizarSaque(idConta, valor) {\n      return this.http.post(`${this.baseUrl}/contas/${idConta}/saque`, null, {\n        params: {\n          valor: valor.toString()\n        } // Enviando o valor como um parâmetro de consulta\n      });\n    }\n    getExtrato(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}/extrato`);\n    }\n    obterDetalhesConta(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["throwError","ContaService","http","baseUrl","constructor","criarConta","dadosConta","idUsuario","post","listarContasPorUsuario","localStorage","getItem","Error","get","getSaldo","idConta","realizarDeposito","valor","url","realizarSaque","params","toString","getExtrato","obterDetalhesConta","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable, throwError } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private baseUrl: string = 'http://localhost:8080/api'; // Substitua pelo URL correto\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  criarConta(dadosConta: { nomeTitular: string }, idUsuario: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.baseUrl}/contas/${idUsuario}`, dadosConta);\r\n  }\r\n\r\n  listarContasPorUsuario(): Observable<ContaDTO[]> {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      return throwError(() => new Error('Usuário não encontrado no localStorage'));\r\n    }\r\n  \r\n    return this.http.get<ContaDTO[]>(`${this.baseUrl}/contas/${idUsuario}`);\r\n  }\r\n  \r\n  \r\n\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.baseUrl}/contas/${idConta}/saldo`);\r\n  }\r\n\r\n  realizarDeposito(idConta: number, valor: number): Observable<ContaDTO> {\r\n    const url = `${this.baseUrl}/contas/${idConta}/deposito?valor=${valor}`;\r\n    return this.http.post<ContaDTO>(url, {}); // Corpo vazio já que o valor está na URL\r\n  }\r\n  \r\n\r\n  realizarSaque(idConta: number, valor: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.baseUrl}/contas/${idConta}/saque`, null, {\r\n      params: { valor: valor.toString() } // Enviando o valor como um parâmetro de consulta\r\n    });\r\n  }\r\n  \r\n  \r\n\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/contas/${idConta}/extrato`);\r\n  }\r\n\r\n  obterDetalhesConta(idConta: number): Observable<ContaDTO> {\r\n    return this.http.get<ContaDTO>(`${this.baseUrl}/contas/${idConta}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAA0BA,UAAU,QAAQ,MAAM;;;AAMlD,WAAaC,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,OAAO,GAAW,2BAA2B,CAAC,CAAC;IAEvDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCG,UAAUA,CAACC,UAAmC,EAAEC,SAAiB;MAC/D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,OAAO,WAAWI,SAAS,EAAE,EAAED,UAAU,CAAC;IACpF;IAEAG,sBAAsBA,CAAA;MACpB,MAAMF,SAAS,GAAGG,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,IAAI,CAACJ,SAAS,EAAE;QACd,OAAOP,UAAU,CAAC,MAAM,IAAIY,KAAK,CAAC,wCAAwC,CAAC,CAAC;MAC9E;MAEA,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAa,GAAG,IAAI,CAACV,OAAO,WAAWI,SAAS,EAAE,CAAC;IACzE;IAIAO,QAAQA,CAACC,OAAe;MACtB,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAS,GAAG,IAAI,CAACV,OAAO,WAAWY,OAAO,QAAQ,CAAC;IACzE;IAEAC,gBAAgBA,CAACD,OAAe,EAAEE,KAAa;MAC7C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,WAAWY,OAAO,mBAAmBE,KAAK,EAAE;MACvE,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAWU,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5C;IAGAC,aAAaA,CAACJ,OAAe,EAAEE,KAAa;MAC1C,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,OAAO,WAAWY,OAAO,QAAQ,EAAE,IAAI,EAAE;QAC/EK,MAAM,EAAE;UAAEH,KAAK,EAAEA,KAAK,CAACI,QAAQ;QAAE,CAAE,CAAC;OACrC,CAAC;IACJ;IAIAC,UAAUA,CAACP,OAAe;MACxB,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAQ,GAAG,IAAI,CAACV,OAAO,WAAWY,OAAO,UAAU,CAAC;IAC1E;IAEAQ,kBAAkBA,CAACR,OAAe;MAChC,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAW,GAAG,IAAI,CAACV,OAAO,WAAWY,OAAO,EAAE,CAAC;IACrE;;uCA5CWd,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZ1B,YAAY;MAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEP7B,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}