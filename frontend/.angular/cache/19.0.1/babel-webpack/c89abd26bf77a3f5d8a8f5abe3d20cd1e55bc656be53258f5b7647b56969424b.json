{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\n    constructor(http) {\n      this.http = http;\n    }\n    criarConta(contaDTO, idUsuario) {\n      return this.http.post(`${this.apiUrl}/${idUsuario}`, contaDTO);\n    }\n    realizarDeposito(idConta, valor) {\n      // Ajustar para enviar o valor como query parameter\n      const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\n      return this.http.post(url, {}); // Corpo vazio\n    }\n    realizarSaque(idConta, valor) {\n      const url = `${this.apiUrl}/${idConta}/saque`;\n      return this.http.post(url, {\n        valor\n      });\n    }\n    getSaldo(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/saldo`);\n    }\n    getExtrato(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["ContaService","http","apiUrl","constructor","criarConta","contaDTO","idUsuario","post","realizarDeposito","idConta","valor","url","realizarSaque","getSaldo","get","getExtrato","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  criarConta(contaDTO: { nomeTitular: string; status: string }, idUsuario: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idUsuario}`, contaDTO); \r\n  }\r\n  \r\n\r\n  realizarDeposito(idConta: number, valor: number): Observable<any> {\r\n    // Ajustar para enviar o valor como query parameter\r\n    const url = `${this.apiUrl}/${idConta}/deposito?valor=${valor}`;\r\n    return this.http.post(url, {}); // Corpo vazio\r\n  }\r\n\r\n  realizarSaque(idConta: number, valor: number): Observable<any> {\r\n    const url = `${this.apiUrl}/${idConta}/saque`;\r\n    return this.http.post(url, { valor });\r\n  }\r\n\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":";;AAQA,WAAaA,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IAErDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCG,UAAUA,CAACC,QAAiD,EAAEC,SAAiB;MAC7E,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,MAAM,IAAII,SAAS,EAAE,EAAED,QAAQ,CAAC;IAC1E;IAGAG,gBAAgBA,CAACC,OAAe,EAAEC,KAAa;MAC7C;MACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIO,OAAO,mBAAmBC,KAAK,EAAE;MAC/D,OAAO,IAAI,CAACT,IAAI,CAACM,IAAI,CAACI,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAClC;IAEAC,aAAaA,CAACH,OAAe,EAAEC,KAAa;MAC1C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIO,OAAO,QAAQ;MAC7C,OAAO,IAAI,CAACR,IAAI,CAACM,IAAI,CAACI,GAAG,EAAE;QAAED;MAAK,CAAE,CAAC;IACvC;IAEAG,QAAQA,CAACJ,OAAe;MACtB,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACZ,MAAM,IAAIO,OAAO,QAAQ,CAAC;IACjE;IAEAM,UAAUA,CAACN,OAAe;MACxB,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAQ,GAAG,IAAI,CAACZ,MAAM,IAAIO,OAAO,UAAU,CAAC;IAClE;;uCA3BWT,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZnB,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPtB,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}