{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    idUsuario = null;\n    salvarIdUsuario(resposta) {\n      // Verifica se a resposta contém o campo idUsuario\n      if (resposta && resposta.idUsuario) {\n        const idUsuario = resposta.idUsuario.toString(); // Certifique-se de que toString() é aplicado ao idUsuario\n        console.log('ID do usuário:', idUsuario);\n        // Salvar no localStorage ou processar conforme necessário\n        localStorage.setItem('idUsuario', idUsuario);\n      } else {\n        console.error('A resposta não contém idUsuario:', resposta);\n      }\n    }\n    // Método para recuperar o id do usuário\n    getIdUsuario() {\n      if (this.idUsuario === null) {\n        const id = localStorage.getItem('idUsuario'); // Busca no localStorage\n        this.idUsuario = id ? parseInt(id, 10) : null;\n      }\n      return this.idUsuario;\n    }\n    // Verifica se o usuário está logado (id != null)\n    isUsuarioLogado() {\n      return this.getIdUsuario() !== null; // Garante que verifica o localStorage\n    }\n    // Método para limpar o ID do usuário\n    limparUsuario() {\n      this.idUsuario = null;\n      localStorage.removeItem('idUsuario');\n    }\n    static ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":{"version":3,"names":["UserService","idUsuario","salvarIdUsuario","resposta","toString","console","log","localStorage","setItem","error","getIdUsuario","id","getItem","parseInt","isUsuarioLogado","limparUsuario","removeItem","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private idUsuario: number | null = null;\r\n\r\n  salvarIdUsuario(resposta: any): void {\r\n    // Verifica se a resposta contém o campo idUsuario\r\n    if (resposta && resposta.idUsuario) {\r\n      const idUsuario = resposta.idUsuario.toString(); // Certifique-se de que toString() é aplicado ao idUsuario\r\n      console.log('ID do usuário:', idUsuario);\r\n      // Salvar no localStorage ou processar conforme necessário\r\n      localStorage.setItem('idUsuario', idUsuario);\r\n    } else {\r\n      console.error('A resposta não contém idUsuario:', resposta);\r\n    }\r\n  }\r\n\r\n  // Método para recuperar o id do usuário\r\n  getIdUsuario(): number | null {\r\n    if (this.idUsuario === null) {\r\n      const id = localStorage.getItem('idUsuario'); // Busca no localStorage\r\n      this.idUsuario = id ? parseInt(id, 10) : null;\r\n    }\r\n    return this.idUsuario;\r\n  }\r\n\r\n  // Verifica se o usuário está logado (id != null)\r\n  isUsuarioLogado(): boolean {\r\n    return this.getIdUsuario() !== null; // Garante que verifica o localStorage\r\n  }\r\n\r\n  // Método para limpar o ID do usuário\r\n  limparUsuario(): void {\r\n    this.idUsuario = null;\r\n    localStorage.removeItem('idUsuario');\r\n  }\r\n}\r\n"],"mappings":";AAKA,WAAaA,WAAW;EAAlB,MAAOA,WAAW;IACdC,SAAS,GAAkB,IAAI;IAEvCC,eAAeA,CAACC,QAAa;MAC3B;MACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACF,SAAS,EAAE;QAClC,MAAMA,SAAS,GAAGE,QAAQ,CAACF,SAAS,CAACG,QAAQ,EAAE,CAAC,CAAC;QACjDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,SAAS,CAAC;QACxC;QACAM,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEP,SAAS,CAAC;MAC9C,CAAC,MAAM;QACLI,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEN,QAAQ,CAAC;MAC7D;IACF;IAEA;IACAO,YAAYA,CAAA;MACV,IAAI,IAAI,CAACT,SAAS,KAAK,IAAI,EAAE;QAC3B,MAAMU,EAAE,GAAGJ,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9C,IAAI,CAACX,SAAS,GAAGU,EAAE,GAAGE,QAAQ,CAACF,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI;MAC/C;MACA,OAAO,IAAI,CAACV,SAAS;IACvB;IAEA;IACAa,eAAeA,CAAA;MACb,OAAO,IAAI,CAACJ,YAAY,EAAE,KAAK,IAAI,CAAC,CAAC;IACvC;IAEA;IACAK,aAAaA,CAAA;MACX,IAAI,CAACd,SAAS,GAAG,IAAI;MACrBM,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACtC;;uCAjCWhB,WAAW;IAAA;;aAAXA,WAAW;MAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPnB,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}