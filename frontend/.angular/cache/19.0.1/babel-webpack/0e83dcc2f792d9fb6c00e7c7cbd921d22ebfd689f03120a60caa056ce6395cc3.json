{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit } from '@angular/core';\n// import { ContaService } from '../services/conta.service';\n// import { CommonModule } from '@angular/common';\n// import { FormsModule } from '@angular/forms';\n// import { ContaDTO } from '../conta.model';\n// @Component({\n//   standalone: true,\n//   selector: 'app-conta',\n//   templateUrl: './conta-component.component.html',\n//   styleUrls: ['./conta-component.component.css'],\n//   imports: [CommonModule, FormsModule],\n// })\n// export class ContaComponent implements OnInit {\n//   contas: ContaDTO[] = [];\n//   contaSelecionada: ContaDTO | null = null;\n//   nomeTitular: string = '';\n//   valor: number = 0;\n//   mostrarExtrato: boolean = false;\n//   extrato: any[] = [];\n//   constructor(private contaService: ContaService) {}\n//   ngOnInit(): void {\n//     this.carregarContas();\n//   }\n//   carregarContas(): void {\n//     const idUsuario = localStorage.getItem('idUsuario');\n//     if (!idUsuario) {\n//       alert('Usuário não autenticado!');\n//       return;\n//     }\n//     this.contaService.listarContas(+idUsuario).subscribe({\n//       next: (contas) => {\n//         this.contas = contas;\n//         if (contas.length > 0) {\n//           this.selecionarConta(contas[0]);\n//         }\n//       },\n//       error: (err) => {\n//         console.error('Erro ao listar contas:', err);\n//         alert('Não foi possível carregar as contas.');\n//       },\n//     });\n//   }\n//   /**\n//    * Seleciona uma conta e carrega os detalhes dela.\n//    * @param conta A conta a ser selecionada.\n//    */\n//   selecionarConta(conta: ContaDTO): void {\n//     this.contaSelecionada = conta;\n//     this.carregarDetalhesConta();\n//   }\n//   /**\n//    * Carrega os detalhes da conta selecionada.\n//    */\n//   carregarDetalhesConta(): void {\n//     if (!this.contaSelecionada) {\n//       return;\n//     }\n//     const idConta = this.contaSelecionada.idConta;\n//     this.contaService.getSaldo(idConta).subscribe({\n//       next: (saldo) => {\n//         this.contaSelecionada!.saldo = saldo;\n//       },\n//       error: (err) => {\n//         console.error('Erro ao obter saldo:', err);\n//         alert('Não foi possível carregar o saldo.');\n//       },\n//     });\n//     if (this.mostrarExtrato) {\n//       this.carregarExtrato();\n//     }\n//   }\n//   /**\n//    * Cria uma nova conta para o usuário.\n//    */\n//   criarConta(): void {\n//     const idUsuario = localStorage.getItem('idUsuario');\n//     if (!idUsuario) {\n//       alert('Usuário não autenticado!');\n//       return;\n//     }\n//     if (!this.nomeTitular.trim()) {\n//       alert('Informe o nome do titular para criar a conta.');\n//       return;\n//     }\n//     this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\n//       next: (novaConta: ContaDTO) => {\n//         alert('Conta criada com sucesso!');\n//         this.contas.push(novaConta);\n//         this.selecionarConta(novaConta);\n//       },\n//       error: (err) => {\n//         console.error('Erro ao criar conta:', err);\n//         alert('Não foi possível criar a conta.');\n//       },\n//     });\n//   }\n//   /**\n//    * Realiza um depósito na conta selecionada.\n//    */\n//   realizarDeposito(): void {\n//     if (!this.contaSelecionada || this.valor <= 0) {\n//       alert('Informe um valor válido para depósito.');\n//       return;\n//     }\n//     this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n//       next: () => {\n//         alert('Depósito realizado com sucesso!');\n//         this.carregarDetalhesConta(); // Atualiza o saldo da conta\n//       },\n//       error: (err) => {\n//         console.error('Erro ao realizar depósito:', err);\n//         alert('Erro ao realizar depósito. Tente novamente mais tarde.');\n//       },\n//     });\n//   }\n//   /**\n//    * Realiza um saque da conta selecionada.\n//    */\n//   realizarSaque(): void {\n//     if (!this.contaSelecionada || this.valor <= 0) {\n//       alert('Informe um valor válido para saque.');\n//       return;\n//     }\n//     this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n//       next: () => {\n//         alert('Saque realizado com sucesso!');\n//         this.carregarDetalhesConta(); // Atualiza o saldo da conta\n//       },\n//       error: (err) => {\n//         console.error('Erro ao realizar saque:', err);\n//         alert('Erro ao realizar saque. Tente novamente mais tarde.');\n//       },\n//     });\n//   }\n//   /**\n//    * Alterna a exibição do extrato da conta selecionada.\n//    */\n//   alternarExtrato(): void {\n//     this.mostrarExtrato = !this.mostrarExtrato;\n//     if (this.mostrarExtrato) {\n//       this.carregarExtrato();\n//     }\n//   }\n//   /**\n//    * Carrega o extrato da conta selecionada.\n//    */\n//   carregarExtrato(): void {\n//     if (!this.contaSelecionada) {\n//       return;\n//     }\n//     this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n//       next: (extrato) => {\n//         this.extrato = extrato;\n//       },\n//       error: (err) => {\n//         console.error('Erro ao obter extrato:', err);\n//         alert('Não foi possível carregar o extrato.');\n//       },\n//     });\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\r\n// import { ContaService } from '../services/conta.service';\r\n// import { CommonModule } from '@angular/common';\r\n// import { FormsModule } from '@angular/forms';\r\n// import { ContaDTO } from '../conta.model';\r\n\r\n// @Component({\r\n//   standalone: true,\r\n//   selector: 'app-conta',\r\n//   templateUrl: './conta-component.component.html',\r\n//   styleUrls: ['./conta-component.component.css'],\r\n//   imports: [CommonModule, FormsModule],\r\n// })\r\n// export class ContaComponent implements OnInit {\r\n//   contas: ContaDTO[] = [];\r\n//   contaSelecionada: ContaDTO | null = null;\r\n//   nomeTitular: string = '';\r\n//   valor: number = 0;\r\n//   mostrarExtrato: boolean = false;\r\n//   extrato: any[] = [];\r\n\r\n//   constructor(private contaService: ContaService) {}\r\n\r\n//   ngOnInit(): void {\r\n//     this.carregarContas();\r\n//   }\r\n\r\n//   carregarContas(): void {\r\n//     const idUsuario = localStorage.getItem('idUsuario');\r\n//     if (!idUsuario) {\r\n//       alert('Usuário não autenticado!');\r\n//       return;\r\n//     }\r\n\r\n//     this.contaService.listarContas(+idUsuario).subscribe({\r\n//       next: (contas) => {\r\n//         this.contas = contas;\r\n//         if (contas.length > 0) {\r\n//           this.selecionarConta(contas[0]);\r\n//         }\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao listar contas:', err);\r\n//         alert('Não foi possível carregar as contas.');\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Seleciona uma conta e carrega os detalhes dela.\r\n//    * @param conta A conta a ser selecionada.\r\n//    */\r\n//   selecionarConta(conta: ContaDTO): void {\r\n//     this.contaSelecionada = conta;\r\n//     this.carregarDetalhesConta();\r\n//   }\r\n\r\n//   /**\r\n//    * Carrega os detalhes da conta selecionada.\r\n//    */\r\n//   carregarDetalhesConta(): void {\r\n//     if (!this.contaSelecionada) {\r\n//       return;\r\n//     }\r\n\r\n//     const idConta = this.contaSelecionada.idConta;\r\n//     this.contaService.getSaldo(idConta).subscribe({\r\n//       next: (saldo) => {\r\n//         this.contaSelecionada!.saldo = saldo;\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao obter saldo:', err);\r\n//         alert('Não foi possível carregar o saldo.');\r\n//       },\r\n//     });\r\n\r\n//     if (this.mostrarExtrato) {\r\n//       this.carregarExtrato();\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Cria uma nova conta para o usuário.\r\n//    */\r\n//   criarConta(): void {\r\n//     const idUsuario = localStorage.getItem('idUsuario');\r\n//     if (!idUsuario) {\r\n//       alert('Usuário não autenticado!');\r\n//       return;\r\n//     }\r\n\r\n//     if (!this.nomeTitular.trim()) {\r\n//       alert('Informe o nome do titular para criar a conta.');\r\n//       return;\r\n//     }\r\n\r\n//     this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\r\n//       next: (novaConta: ContaDTO) => {\r\n//         alert('Conta criada com sucesso!');\r\n//         this.contas.push(novaConta);\r\n//         this.selecionarConta(novaConta);\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao criar conta:', err);\r\n//         alert('Não foi possível criar a conta.');\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Realiza um depósito na conta selecionada.\r\n//    */\r\n//   realizarDeposito(): void {\r\n//     if (!this.contaSelecionada || this.valor <= 0) {\r\n//       alert('Informe um valor válido para depósito.');\r\n//       return;\r\n//     }\r\n\r\n//     this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n//       next: () => {\r\n//         alert('Depósito realizado com sucesso!');\r\n//         this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao realizar depósito:', err);\r\n//         alert('Erro ao realizar depósito. Tente novamente mais tarde.');\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Realiza um saque da conta selecionada.\r\n//    */\r\n//   realizarSaque(): void {\r\n//     if (!this.contaSelecionada || this.valor <= 0) {\r\n//       alert('Informe um valor válido para saque.');\r\n//       return;\r\n//     }\r\n\r\n//     this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n//       next: () => {\r\n//         alert('Saque realizado com sucesso!');\r\n//         this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao realizar saque:', err);\r\n//         alert('Erro ao realizar saque. Tente novamente mais tarde.');\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Alterna a exibição do extrato da conta selecionada.\r\n//    */\r\n//   alternarExtrato(): void {\r\n//     this.mostrarExtrato = !this.mostrarExtrato;\r\n//     if (this.mostrarExtrato) {\r\n//       this.carregarExtrato();\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Carrega o extrato da conta selecionada.\r\n//    */\r\n//   carregarExtrato(): void {\r\n//     if (!this.contaSelecionada) {\r\n//       return;\r\n//     }\r\n\r\n//     this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n//       next: (extrato) => {\r\n//         this.extrato = extrato;\r\n//       },\r\n//       error: (err) => {\r\n//         console.error('Erro ao obter extrato:', err);\r\n//         alert('Não foi possível carregar o extrato.');\r\n//       },\r\n//     });\r\n//   }\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}