{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet ContaComponent = class ContaComponent {\n  contaService;\n  route;\n  idConta = null;\n  nomeTitular = '';\n  saldo = 0;\n  extrato = [];\n  contas = [];\n  valor = 0;\n  // Propriedade para controlar a exibição do extrato\n  mostrarExtrato = false;\n  constructor(contaService, route) {\n    this.contaService = contaService;\n    this.route = route;\n  }\n  ngOnInit() {\n    const idUsuario = localStorage.getItem('idUsuario');\n    if (idUsuario) {\n      this.idConta = +idUsuario; // Obtém o ID do usuário do localStorage\n      this.carregarConta();\n    } else {\n      alert('Usuário não autenticado!');\n    }\n  }\n  carregarConta() {\n    if (this.idConta) {\n      this.contaService.getSaldo(this.idConta).subscribe({\n        next: saldo => this.saldo = saldo,\n        error: err => console.error('Erro ao obter saldo:', err)\n      });\n      this.contaService.getExtrato(this.idConta).subscribe({\n        next: extrato => this.extrato = extrato,\n        error: err => console.error('Erro ao obter extrato:', err)\n      });\n    }\n  }\n  realizarDeposito() {\n    if (!this.idConta || this.valor <= 0) {\n      alert('Informe um valor válido para depósito.');\n      return;\n    }\n    this.contaService.realizarDeposito(this.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Depósito realizado com sucesso!');\n        this.carregarConta();\n      },\n      error: () => alert('Erro ao realizar depósito.')\n    });\n  }\n  realizarSaque() {\n    if (!this.idConta || this.valor <= 0) {\n      alert('Informe um valor válido para saque.');\n      return;\n    }\n    this.contaService.realizarSaque(this.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Saque realizado com sucesso!');\n        this.carregarConta();\n      },\n      error: err => {\n        alert('Erro ao realizar saque.');\n        console.error(err);\n      }\n    });\n  }\n  // Método para listar contas\n  listarContas() {\n    this.contaService.listarContas([this.idConta]).subscribe({\n      next: contas => this.contas = contas,\n      error: err => console.error('Erro ao listar contas:', err)\n    });\n  }\n  // Método para criar uma conta\n  criarConta() {\n    if (!this.nomeTitular.trim()) {\n      alert('Informe o nome do titular para criar a conta.');\n      return;\n    }\n    this.contaService.criarConta({\n      nomeTitular: this.nomeTitular,\n      status: 'ativo'\n    }, this.idConta).subscribe({\n      next: novaConta => {\n        alert('Conta criada com sucesso!');\n        this.idConta = novaConta.idConta;\n        this.carregarConta();\n      },\n      error: err => console.error('Erro ao criar conta:', err)\n    });\n  }\n};\nContaComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-conta',\n  templateUrl: './conta-component.component.html',\n  styleUrls: ['./conta-component.component.css'],\n  imports: [CommonModule, FormsModule]\n})], ContaComponent);\nexport { ContaComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","ContaComponent","contaService","route","idConta","nomeTitular","saldo","extrato","contas","valor","mostrarExtrato","constructor","ngOnInit","idUsuario","localStorage","getItem","carregarConta","alert","getSaldo","subscribe","next","error","err","console","getExtrato","realizarDeposito","realizarSaque","listarContas","criarConta","trim","status","novaConta","__decorate","standalone","selector","templateUrl","styleUrls","imports"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  idConta: number | null = null;\r\n  nomeTitular: string = '';\r\n  saldo: number = 0;\r\n  extrato: any[] = [];\r\n  contas: ContaDTO[] = [];\r\n  valor: number = 0;\r\n\r\n  // Propriedade para controlar a exibição do extrato\r\n  mostrarExtrato: boolean = false;\r\n\r\n  constructor(private contaService: ContaService, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (idUsuario) {\r\n      this.idConta = +idUsuario; // Obtém o ID do usuário do localStorage\r\n      this.carregarConta();\r\n    } else {\r\n      alert('Usuário não autenticado!');\r\n    }\r\n  }\r\n\r\n  carregarConta(): void {\r\n    if (this.idConta) {\r\n      this.contaService.getSaldo(this.idConta).subscribe({\r\n        next: (saldo) => (this.saldo = saldo),\r\n        error: (err) => console.error('Erro ao obter saldo:', err),\r\n      });\r\n\r\n      this.contaService.getExtrato(this.idConta).subscribe({\r\n        next: (extrato) => (this.extrato = extrato),\r\n        error: (err) => console.error('Erro ao obter extrato:', err),\r\n      });\r\n    }\r\n  }\r\n\r\n  realizarDeposito(): void {\r\n    if (!this.idConta || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarDeposito(this.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.carregarConta();\r\n      },\r\n      error: () => alert('Erro ao realizar depósito.'),\r\n    });\r\n  }\r\n\r\n  realizarSaque(): void {\r\n    if (!this.idConta || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarSaque(this.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.carregarConta();\r\n      },\r\n      error: (err) => {\r\n        alert('Erro ao realizar saque.');\r\n        console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Método para listar contas\r\n  listarContas(): void {\r\n    this.contaService.listarContas([this.idConta!]).subscribe({\r\n      next: (contas) => (this.contas = contas),\r\n      error: (err) => console.error('Erro ao listar contas:', err),\r\n    });\r\n  }\r\n\r\n  // Método para criar uma conta\r\n  criarConta(): void {\r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular, status: 'ativo' }, this.idConta!).subscribe({\r\n      next: (novaConta) => {\r\n        alert('Conta criada com sucesso!');\r\n        this.idConta = novaConta.idConta;\r\n        this.carregarConta();\r\n      },\r\n      error: (err) => console.error('Erro ao criar conta:', err),\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}