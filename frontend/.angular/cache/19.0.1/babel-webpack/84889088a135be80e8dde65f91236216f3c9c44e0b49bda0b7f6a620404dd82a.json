{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    baseUrl = 'http://seu-endpoint/api'; // Substitua pelo URL correto do seu backend\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Lista as contas do usuário a partir do ID do usuário.\n     * @param idUsuario O ID do usuário.\n     * @returns Observable com a lista de contas.\n     */\n    listarContas(idUsuario) {\n      return this.http.get(`${this.baseUrl}/usuario/${idUsuario}`);\n    }\n    /**\n     * Realiza um depósito em uma conta.\n     * @param idConta ID da conta que receberá o depósito.\n     * @param valor Valor a ser depositado.\n     * @returns Observable contendo os dados atualizados da conta.\n     */\n    realizarDeposito(idConta, valor) {\n      if (valor <= 0) {\n        throw new Error('Valor de depósito inválido');\n      }\n      return this.http.post(`${this.apiUrl}/${idConta}/deposito`, {\n        valor\n      });\n    }\n    /**\n     * Realiza um saque em uma conta.\n     * @param idConta ID da conta de onde será realizado o saque.\n     * @param valor Valor a ser sacado.\n     * @returns Observable contendo os dados atualizados da conta.\n     */\n    realizarSaque(idConta, valor) {\n      if (valor <= 0) {\n        throw new Error('Valor de saque inválido');\n      }\n      return this.http.post(`${this.apiUrl}/${idConta}/saque`, {\n        valor\n      });\n    }\n    /**\n     * Consulta o saldo de uma conta específica.\n     * @param idConta ID da conta para consultar o saldo.\n     * @returns Observable contendo o saldo da conta.\n     */\n    getSaldo(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/saldo`);\n    }\n    /**\n     * Obtém o extrato de uma conta específica.\n     * @param idConta ID da conta para consultar o extrato.\n     * @returns Observable contendo o extrato da conta.\n     */\n    getExtrato(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["ContaService","http","baseUrl","constructor","listarContas","idUsuario","get","realizarDeposito","idConta","valor","Error","post","apiUrl","realizarSaque","getSaldo","getExtrato","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private baseUrl: string = 'http://seu-endpoint/api'; // Substitua pelo URL correto do seu backend\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Lista as contas do usuário a partir do ID do usuário.\r\n   * @param idUsuario O ID do usuário.\r\n   * @returns Observable com a lista de contas.\r\n   */\r\n  listarContas(idUsuario: number): Observable<ContaDTO[]> {\r\n    return this.http.get<ContaDTO[]>(`${this.baseUrl}/usuario/${idUsuario}`);\r\n  }\r\n\r\n  /**\r\n   * Realiza um depósito em uma conta.\r\n   * @param idConta ID da conta que receberá o depósito.\r\n   * @param valor Valor a ser depositado.\r\n   * @returns Observable contendo os dados atualizados da conta.\r\n   */\r\n  realizarDeposito(idConta: number, valor: number): Observable<ContaDTO> {\r\n    if (valor <= 0) {\r\n      throw new Error('Valor de depósito inválido');\r\n    }\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idConta}/deposito`, { valor });\r\n  }\r\n\r\n  /**\r\n   * Realiza um saque em uma conta.\r\n   * @param idConta ID da conta de onde será realizado o saque.\r\n   * @param valor Valor a ser sacado.\r\n   * @returns Observable contendo os dados atualizados da conta.\r\n   */\r\n  realizarSaque(idConta: number, valor: number): Observable<ContaDTO> {\r\n    if (valor <= 0) {\r\n      throw new Error('Valor de saque inválido');\r\n    }\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idConta}/saque`, { valor });\r\n  }\r\n\r\n  /**\r\n   * Consulta o saldo de uma conta específica.\r\n   * @param idConta ID da conta para consultar o saldo.\r\n   * @returns Observable contendo o saldo da conta.\r\n   */\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  /**\r\n   * Obtém o extrato de uma conta específica.\r\n   * @param idConta ID da conta para consultar o extrato.\r\n   * @returns Observable contendo o extrato da conta.\r\n   */\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":";;AAQA,WAAaA,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,OAAO,GAAW,yBAAyB,CAAC,CAAC;IAErDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;;;;;IAKAG,YAAYA,CAACC,SAAiB;MAC5B,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,GAAG,IAAI,CAACJ,OAAO,YAAYG,SAAS,EAAE,CAAC;IAC1E;IAEA;;;;;;IAMAE,gBAAgBA,CAACC,OAAe,EAAEC,KAAa;MAC7C,IAAIA,KAAK,IAAI,CAAC,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAW,GAAG,IAAI,CAACC,MAAM,IAAIJ,OAAO,WAAW,EAAE;QAAEC;MAAK,CAAE,CAAC;IAClF;IAEA;;;;;;IAMAI,aAAaA,CAACL,OAAe,EAAEC,KAAa;MAC1C,IAAIA,KAAK,IAAI,CAAC,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAW,GAAG,IAAI,CAACC,MAAM,IAAIJ,OAAO,QAAQ,EAAE;QAAEC;MAAK,CAAE,CAAC;IAC/E;IAEA;;;;;IAKAK,QAAQA,CAACN,OAAe;MACtB,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACM,MAAM,IAAIJ,OAAO,QAAQ,CAAC;IACjE;IAEA;;;;;IAKAO,UAAUA,CAACP,OAAe;MACxB,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACM,MAAM,IAAIJ,OAAO,UAAU,CAAC;IAClE;;uCAxDWR,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZnB,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPtB,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}