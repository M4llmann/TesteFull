{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    baseUrl = 'http://localhost:8080/api'; // Substitua pelo URL correto\n    constructor(http) {\n      this.http = http;\n    }\n    criarConta(dadosConta, idUsuario) {\n      return this.http.post(`${this.baseUrl}/contas/${idUsuario}`, dadosConta);\n    }\n    listarContasPorUsuario(idUsuario) {\n      return this.http.get(`${this.baseUrl}/contas/${idUsuario}`);\n    }\n    getSaldo(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}/saldo`);\n    }\n    realizarDeposito(idConta, valor) {\n      return this.http.post(`${this.baseUrl}/contas/${idConta}/deposito`, null, {\n        params: {\n          valor: valor.toString()\n        }\n      });\n    }\n    realizarSaque(idConta, valor) {\n      return this.http.post(`${this.baseUrl}/contas/${idConta}/saque`, null, {\n        params: {\n          valor: valor.toString()\n        }\n      });\n    }\n    getExtrato(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}/extrato`);\n    }\n    obterDetalhesConta(idConta) {\n      return this.http.get(`${this.baseUrl}/contas/${idConta}`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["ContaService","http","baseUrl","constructor","criarConta","dadosConta","idUsuario","post","listarContasPorUsuario","get","getSaldo","idConta","realizarDeposito","valor","params","toString","realizarSaque","getExtrato","obterDetalhesConta","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\services\\conta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private baseUrl: string = 'http://localhost:8080/api'; // Substitua pelo URL correto\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  criarConta(dadosConta: { nomeTitular: string }, idUsuario: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.baseUrl}/contas/${idUsuario}`, dadosConta);\r\n  }\r\n\r\n  listarContasPorUsuario(idUsuario: number): Observable<ContaDTO[]> {\r\n    return this.http.get<ContaDTO[]>(`${this.baseUrl}/contas/${idUsuario}`);\r\n  }\r\n\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.baseUrl}/contas/${idConta}/saldo`);\r\n  }\r\n\r\n  realizarDeposito(idConta: number, valor: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.baseUrl}/contas/${idConta}/deposito`, null, {\r\n      params: { valor: valor.toString() },\r\n    });\r\n  }\r\n\r\n  realizarSaque(idConta: number, valor: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.baseUrl}/contas/${idConta}/saque`, null, {\r\n      params: { valor: valor.toString() },\r\n    });\r\n  }\r\n\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/contas/${idConta}/extrato`);\r\n  }\r\n\r\n  obterDetalhesConta(idConta: number): Observable<ContaDTO> {\r\n    return this.http.get<ContaDTO>(`${this.baseUrl}/contas/${idConta}`);\r\n  }\r\n}\r\n"],"mappings":";;AAQA,WAAaA,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,OAAO,GAAW,2BAA2B,CAAC,CAAC;IAEvDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCG,UAAUA,CAACC,UAAmC,EAAEC,SAAiB;MAC/D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,OAAO,WAAWI,SAAS,EAAE,EAAED,UAAU,CAAC;IACpF;IAEAG,sBAAsBA,CAACF,SAAiB;MACtC,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAa,GAAG,IAAI,CAACP,OAAO,WAAWI,SAAS,EAAE,CAAC;IACzE;IAEAI,QAAQA,CAACC,OAAe;MACtB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAS,GAAG,IAAI,CAACP,OAAO,WAAWS,OAAO,QAAQ,CAAC;IACzE;IAEAC,gBAAgBA,CAACD,OAAe,EAAEE,KAAa;MAC7C,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,OAAO,WAAWS,OAAO,WAAW,EAAE,IAAI,EAAE;QAClFG,MAAM,EAAE;UAAED,KAAK,EAAEA,KAAK,CAACE,QAAQ;QAAE;OAClC,CAAC;IACJ;IAEAC,aAAaA,CAACL,OAAe,EAAEE,KAAa;MAC1C,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,OAAO,WAAWS,OAAO,QAAQ,EAAE,IAAI,EAAE;QAC/EG,MAAM,EAAE;UAAED,KAAK,EAAEA,KAAK,CAACE,QAAQ;QAAE;OAClC,CAAC;IACJ;IAEAE,UAAUA,CAACN,OAAe;MACxB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,OAAO,WAAWS,OAAO,UAAU,CAAC;IAC1E;IAEAO,kBAAkBA,CAACP,OAAe;MAChC,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAW,GAAG,IAAI,CAACP,OAAO,WAAWS,OAAO,EAAE,CAAC;IACrE;;uCAnCWX,YAAY,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZtB,YAAY;MAAAuB,OAAA,EAAZvB,YAAY,CAAAwB,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPzB,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}