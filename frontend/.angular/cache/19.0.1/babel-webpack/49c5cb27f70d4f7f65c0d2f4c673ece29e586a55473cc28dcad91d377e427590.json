{"ast":null,"code":"import { __decorate } from \"tslib\";\nlet ContaComponent = class ContaComponent {\n  contaService;\n  contas = [];\n  contaSelecionada = null;\n  nomeTitular = '';\n  valor = 0;\n  mostrarExtrato = false;\n  extrato = [];\n  constructor(contaService) {\n    this.contaService = contaService;\n  }\n  ngOnInit() {\n    this.carregarContas();\n  }\n  carregarContas() {\n    const idUsuario = localStorage.getItem('idUsuario');\n    if (!idUsuario) {\n      alert('Usuário não autenticado!');\n      return;\n    }\n    this.contaService.listarContas(+idUsuario).subscribe({\n      next: contas => {\n        this.contas = contas;\n        if (contas.length > 0) {\n          this.selecionarConta(contas[0]);\n        }\n      },\n      error: err => {\n        console.error('Erro ao listar contas:', err);\n        alert('Não foi possível carregar as contas.');\n      }\n    });\n  }\n  // Função para criar a conta\n  criarConta() {\n    const idUsuario = localStorage.getItem('idUsuario');\n    if (!idUsuario) {\n      alert('Usuário não autenticado!');\n      return;\n    }\n    // Verifica se o nome do titular foi fornecido\n    if (!this.nomeTitular.trim()) {\n      alert('Informe o nome do titular para criar a conta.');\n      return;\n    }\n    // Chama o serviço para criar a conta\n    this.contaService.criarConta({\n      nomeTitular: this.nomeTitular\n    }, +idUsuario).subscribe({\n      next: novaConta => {\n        alert('Conta criada com sucesso!');\n        this.contas.push(novaConta); // Adiciona a nova conta à lista\n        this.selecionarConta(novaConta); // Seleciona a nova conta\n      },\n      error: err => {\n        console.error('Erro ao criar conta:', err);\n        alert('Não foi possível criar a conta.');\n      }\n    });\n  }\n  realizarDeposito() {\n    if (!this.contaSelecionada || this.valor <= 0) {\n      alert('Informe um valor válido para depósito.');\n      return;\n    }\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Depósito realizado com sucesso!');\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\n      },\n      error: err => {\n        console.error('Erro ao realizar depósito:', err);\n        alert('Erro ao realizar depósito. Tente novamente mais tarde.');\n      }\n    });\n  }\n  realizarSaque() {\n    if (!this.contaSelecionada || this.valor <= 0) {\n      alert('Informe um valor válido para saque.');\n      return;\n    }\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n      next: () => {\n        alert('Saque realizado com sucesso!');\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\n      },\n      error: err => {\n        console.error('Erro ao realizar saque:', err);\n        alert('Erro ao realizar saque. Tente novamente mais tarde.');\n      }\n    });\n  }\n  /**\n   * Alterna a exibição do extrato da conta selecionada.\n   */\n  alternarExtrato() {\n    this.mostrarExtrato = !this.mostrarExtrato;\n    if (this.mostrarExtrato) {\n      this.carregarExtrato();\n    }\n  }\n  /**\n   * Carrega o extrato da conta selecionada.\n   */\n  carregarExtrato() {\n    if (!this.contaSelecionada) {\n      return;\n    }\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n      next: extrato => {\n        this.extrato = extrato;\n      },\n      error: err => {\n        console.error('Erro ao obter extrato:', err);\n        alert('Não foi possível carregar o extrato.');\n      }\n    });\n  }\n};\nContaComponent = __decorate([Component({\n  selector: 'app-conta',\n  templateUrl: './conta-component.component.html',\n  styleUrls: ['./conta-component.component.css']\n})], ContaComponent);\nexport { ContaComponent };","map":{"version":3,"names":["ContaComponent","contaService","contas","contaSelecionada","nomeTitular","valor","mostrarExtrato","extrato","constructor","ngOnInit","carregarContas","idUsuario","localStorage","getItem","alert","listarContas","subscribe","next","length","selecionarConta","error","err","console","criarConta","trim","novaConta","push","realizarDeposito","idConta","carregarDetalhesConta","realizarSaque","alternarExtrato","carregarExtrato","getExtrato","__decorate","Component","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts"],"sourcesContent":["@Component({\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css']\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  contas: ContaDTO[] = [];\r\n  contaSelecionada: ContaDTO | null = null;\r\n  nomeTitular: string = '';\r\n  valor: number = 0;\r\n  mostrarExtrato: boolean = false;\r\n  extrato: any[] = [];\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.carregarContas();\r\n  }\r\n\r\n  carregarContas(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n\r\n    this.contaService.listarContas(+idUsuario).subscribe({\r\n      next: (contas) => {\r\n        this.contas = contas;\r\n        if (contas.length > 0) {\r\n          this.selecionarConta(contas[0]);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas:', err);\r\n        alert('Não foi possível carregar as contas.');\r\n      },\r\n    });\r\n  }\r\n\r\n  // Função para criar a conta\r\n  criarConta(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n\r\n    // Verifica se o nome do titular foi fornecido\r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n\r\n    // Chama o serviço para criar a conta\r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\r\n      next: (novaConta: ContaDTO) => {\r\n        alert('Conta criada com sucesso!');\r\n        this.contas.push(novaConta); // Adiciona a nova conta à lista\r\n        this.selecionarConta(novaConta); // Seleciona a nova conta\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao criar conta:', err);\r\n        alert('Não foi possível criar a conta.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  realizarDeposito(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar depósito:', err);\r\n        alert('Erro ao realizar depósito. Tente novamente mais tarde.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  realizarSaque(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: () => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.carregarDetalhesConta(); // Atualiza o saldo da conta\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar saque:', err);\r\n        alert('Erro ao realizar saque. Tente novamente mais tarde.');\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  /**\r\n   * Alterna a exibição do extrato da conta selecionada.\r\n   */\r\n  alternarExtrato(): void {\r\n    this.mostrarExtrato = !this.mostrarExtrato;\r\n    if (this.mostrarExtrato) {\r\n      this.carregarExtrato();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Carrega o extrato da conta selecionada.\r\n   */\r\n  carregarExtrato(): void {\r\n    if (!this.contaSelecionada) {\r\n      return;\r\n    }\r\n\r\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n      next: (extrato) => {\r\n        this.extrato = extrato;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao obter extrato:', err);\r\n        alert('Não foi possível carregar o extrato.');\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}