{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/conta.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ContaComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Criar Conta\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 3);\n    i0.ɵɵtext(4, \"Nome do Titular\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 4);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_3_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.nomeTitular, $event) || (ctx_r1.nomeTitular = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_3_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.criarConta());\n    });\n    i0.ɵɵtext(7, \"Criar Conta\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.nomeTitular);\n  }\n}\nfunction ContaComponent_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ContaComponent_li_8_Template_button_click_1_listener() {\n      const conta_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.selecionarConta(conta_r4));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const conta_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"selected\", conta_r4 === ctx_r1.contaSelecionada);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", conta_r4.nomeTitular, \" - Saldo: \", i0.ɵɵpipeBind1(3, 4, conta_r4.saldo), \" \");\n  }\n}\nfunction ContaComponent_div_9_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_9_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.realizarDeposito());\n    });\n    i0.ɵɵtext(1, \"Depositar\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ContaComponent_div_9_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_9_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.realizarSaque());\n    });\n    i0.ɵɵtext(1, \"Sacar\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ContaComponent_div_9_div_14_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" - \");\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" - \");\n    i0.ɵɵelementStart(8, \"span\");\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const transacao_r8 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 3, transacao_r8.dataTransacao, \"dd/MM/yyyy HH:mm\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(transacao_r8.tipo);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 6, transacao_r8.valor));\n  }\n}\nfunction ContaComponent_div_9_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\");\n    i0.ɵɵtemplate(2, ContaComponent_div_9_div_14_li_2_Template, 11, 8, \"li\", 2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.extrato);\n  }\n}\nfunction ContaComponent_div_9_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Nenhuma transa\\u00E7\\u00E3o registrada.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ContaComponent_div_9_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"p\");\n    i0.ɵɵtext(2, \"Ocorreu um erro ao carregar as contas. Tente novamente.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ContaComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"h4\");\n    i0.ɵɵtext(5, \"Realizar Transa\\u00E7\\u00E3o\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 7);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ContaComponent_div_9_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.valor, $event) || (ctx_r1.valor = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ContaComponent_div_9_button_7_Template, 2, 0, \"button\", 8)(8, ContaComponent_div_9_button_8_Template, 2, 0, \"button\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"h4\");\n    i0.ɵɵtext(11, \"Extrato da Conta\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ContaComponent_div_9_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.carregarExtrato());\n    });\n    i0.ɵɵtext(13, \"Carregar Extrato\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, ContaComponent_div_9_div_14_Template, 3, 1, \"div\", 1)(15, ContaComponent_div_9_div_15_Template, 3, 0, \"div\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, ContaComponent_div_9_div_16_Template, 3, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Detalhes da Conta: \", ctx_r1.contaSelecionada.nomeTitular, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.valor);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.valor > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.valor > 0);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.extrato.length > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.extrato.length === 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.erro);\n  }\n}\nexport let ContaComponent = /*#__PURE__*/(() => {\n  class ContaComponent {\n    contaService;\n    contas = [];\n    contaSelecionada = null;\n    nomeTitular = '';\n    valor = 0;\n    mostrarExtrato = false;\n    extrato = []; // Tipagem correta para o extrato\n    erro = false;\n    constructor(contaService) {\n      this.contaService = contaService;\n    }\n    ngOnInit() {\n      this.listarContas();\n    }\n    listarContas() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado! Faça login para listar as contas.');\n        return;\n      }\n      this.contaService.listarContasPorUsuario().subscribe({\n        next: dados => {\n          console.log('Contas retornadas pelo backend:', dados);\n          // Verifica se o retorno é um objeto único ou um array\n          if (Array.isArray(dados)) {\n            this.contas = dados;\n          } else {\n            this.contas = [dados]; // Converte o objeto único em um array\n          }\n          this.erro = false;\n        },\n        error: err => {\n          console.error('Erro ao listar contas:', err);\n          this.erro = true;\n          alert('Não foi possível listar as contas.');\n        }\n      });\n    }\n    selecionarConta(conta) {\n      this.contaSelecionada = conta;\n      this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\n    }\n    criarConta() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado!');\n        return;\n      }\n      if (!this.nomeTitular.trim()) {\n        alert('Informe o nome do titular para criar a conta.');\n        return;\n      }\n      this.contaService.criarConta({\n        nomeTitular: this.nomeTitular\n      }, +idUsuario).subscribe({\n        next: novaConta => {\n          console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\n          alert('Conta criada com sucesso!');\n          if (novaConta) {\n            this.contas.push(novaConta); // Adiciona a nova conta à lista\n            this.selecionarConta(novaConta); // Seleciona a conta automaticamente\n          } else {\n            console.error('Erro: A resposta da API não contém uma conta válida.');\n          }\n        },\n        error: err => {\n          console.error('Erro ao criar conta:', err);\n          alert('Erro ao criar a conta.');\n        }\n      });\n    }\n    realizarDeposito() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para depósito.');\n        return;\n      }\n      this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Depósito realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar depósito:', err);\n          alert('Erro ao realizar depósito. Tente novamente.');\n        }\n      });\n    }\n    realizarSaque() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para saque.');\n        return;\n      }\n      this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Saque realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar saque:', err);\n          alert('Erro ao realizar saque. Tente novamente.');\n        }\n      });\n    }\n    carregarExtrato() {\n      if (!this.contaSelecionada) {\n        alert('Selecione uma conta para visualizar o extrato.');\n        return;\n      }\n      this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n        next: extrato => {\n          this.extrato = extrato;\n        },\n        error: err => {\n          console.error('Erro ao carregar extrato:', err);\n          alert('Erro ao carregar o extrato.');\n        }\n      });\n    }\n    carregarDetalhesConta() {\n      if (!this.contaSelecionada) {\n        return;\n      }\n      this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\n        next: contaAtualizada => {\n          this.contaSelecionada = contaAtualizada;\n        },\n        error: err => {\n          console.error('Erro ao carregar detalhes da conta:', err);\n          alert('Erro ao carregar detalhes da conta.');\n        }\n      });\n    }\n    static ɵfac = function ContaComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaComponent)(i0.ɵɵdirectiveInject(i1.ContaService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ContaComponent,\n      selectors: [[\"app-conta\"]],\n      decls: 10,\n      vars: 3,\n      consts: [[1, \"container\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"for\", \"nomeTitular\"], [\"type\", \"text\", \"id\", \"nomeTitular\", \"placeholder\", \"Digite o nome do titular\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\"], [1, \"account-button\", 3, \"click\"], [\"type\", \"number\", \"placeholder\", \"Digite o valor\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\", 4, \"ngIf\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n      template: function ContaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"Gerenciar Contas\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, ContaComponent_div_3_Template, 8, 1, \"div\", 1);\n          i0.ɵɵelementStart(4, \"div\")(5, \"h3\");\n          i0.ɵɵtext(6, \"Contas Dispon\\u00EDveis\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"ul\");\n          i0.ɵɵtemplate(8, ContaComponent_li_8_Template, 4, 6, \"li\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, ContaComponent_div_9_Template, 17, 7, \"div\", 1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.contas.length === 0);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.contas);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.contaSelecionada);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, i2.CurrencyPipe, i2.DatePipe, FormsModule, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ContaComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtwoWayListener","ContaComponent_div_3_Template_input_ngModelChange_5_listener","$event","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵtwoWayBindingSet","nomeTitular","ɵɵresetView","ɵɵlistener","ContaComponent_div_3_Template_button_click_6_listener","criarConta","ɵɵadvance","ɵɵtwoWayProperty","ContaComponent_li_8_Template_button_click_1_listener","conta_r4","_r3","$implicit","selecionarConta","ɵɵclassProp","contaSelecionada","ɵɵtextInterpolate2","ɵɵpipeBind1","saldo","ContaComponent_div_9_button_7_Template_button_click_0_listener","_r6","realizarDeposito","ContaComponent_div_9_button_8_Template_button_click_0_listener","_r7","realizarSaque","ɵɵtextInterpolate","ɵɵpipeBind2","transacao_r8","dataTransacao","tipo","valor","ɵɵtemplate","ContaComponent_div_9_div_14_li_2_Template","ɵɵproperty","extrato","ContaComponent_div_9_Template_input_ngModelChange_6_listener","_r5","ContaComponent_div_9_button_7_Template","ContaComponent_div_9_button_8_Template","ContaComponent_div_9_Template_button_click_12_listener","carregarExtrato","ContaComponent_div_9_div_14_Template","ContaComponent_div_9_div_15_Template","ContaComponent_div_9_div_16_Template","ɵɵtextInterpolate1","length","erro","ContaComponent","contaService","contas","mostrarExtrato","constructor","ngOnInit","listarContas","idUsuario","localStorage","getItem","alert","listarContasPorUsuario","subscribe","next","dados","console","log","Array","isArray","error","err","conta","trim","novaConta","push","idConta","contaAtualizada","getExtrato","carregarDetalhesConta","obterDetalhesConta","ɵɵdirectiveInject","i1","ContaService","selectors","decls","vars","consts","template","ContaComponent_Template","rf","ctx","ContaComponent_div_3_Template","ContaComponent_li_8_Template","ContaComponent_div_9_Template","i2","NgForOf","NgIf","CurrencyPipe","DatePipe","i3","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgModel","styles"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts","C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ContaDTO } from '../conta.model';\r\nimport { TransacaoDTO } from '../transacao.model';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  contas: ContaDTO[] = [];\r\n  contaSelecionada: ContaDTO | null = null;\r\n  nomeTitular: string = '';\r\n  valor: number = 0;\r\n  mostrarExtrato: boolean = false;\r\n  extrato: TransacaoDTO[] = []; // Tipagem correta para o extrato\r\n    erro: boolean = false;\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.listarContas();\r\n  }\r\n\r\n  listarContas(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado! Faça login para listar as contas.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.listarContasPorUsuario().subscribe({\r\n      next: (dados: ContaDTO | ContaDTO[]) => {\r\n        console.log('Contas retornadas pelo backend:', dados);\r\n  \r\n        // Verifica se o retorno é um objeto único ou um array\r\n        if (Array.isArray(dados)) {\r\n          this.contas = dados;\r\n        } else {\r\n          this.contas = [dados]; // Converte o objeto único em um array\r\n        }\r\n  \r\n        this.erro = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas:', err);\r\n        this.erro = true;\r\n        alert('Não foi possível listar as contas.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  selecionarConta(conta: ContaDTO): void {\r\n    this.contaSelecionada = conta;\r\n    this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\r\n  }\r\n\r\n  criarConta(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n  \r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\r\n      next: (novaConta: ContaDTO) => {\r\n        console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\r\n        alert('Conta criada com sucesso!');\r\n        if (novaConta) {\r\n          this.contas.push(novaConta);  // Adiciona a nova conta à lista\r\n          this.selecionarConta(novaConta);  // Seleciona a conta automaticamente\r\n        } else {\r\n          console.error('Erro: A resposta da API não contém uma conta válida.');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao criar conta:', err);\r\n        alert('Erro ao criar a conta.');\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  realizarDeposito(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar depósito:', err);\r\n        alert('Erro ao realizar depósito. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  realizarSaque(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar saque:', err);\r\n        alert('Erro ao realizar saque. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  carregarExtrato(): void {\r\n    if (!this.contaSelecionada) {\r\n      alert('Selecione uma conta para visualizar o extrato.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n      next: (extrato) => {\r\n        this.extrato = extrato;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar extrato:', err);\r\n        alert('Erro ao carregar o extrato.');\r\n      },\r\n    });\r\n  }\r\n\r\n  carregarDetalhesConta(): void {\r\n    if (!this.contaSelecionada) {\r\n      return;\r\n    }\r\n\r\n    this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\r\n      next: (contaAtualizada) => {\r\n        this.contaSelecionada = contaAtualizada;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar detalhes da conta:', err);\r\n        alert('Erro ao carregar detalhes da conta.');\r\n      },\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <!-- Título e nome do usuário -->\r\n  <h1>Gerenciar Contas</h1>\r\n\r\n  <!-- Formulário para criar conta (aparece somente se não houver nenhuma conta) -->\r\n  <div *ngIf=\"contas.length === 0\">\r\n    <h3>Criar Conta</h3>\r\n    <label for=\"nomeTitular\">Nome do Titular</label>\r\n    <input type=\"text\" id=\"nomeTitular\" [(ngModel)]=\"nomeTitular\" placeholder=\"Digite o nome do titular\" />\r\n    <button (click)=\"criarConta()\">Criar Conta</button>\r\n  </div>\r\n\r\n    <!-- Listagem de contas -->\r\n<div>\r\n  <h3>Contas Disponíveis</h3>\r\n  <ul>\r\n    <li *ngFor=\"let conta of contas\">\r\n      <button \r\n        (click)=\"selecionarConta(conta)\" \r\n        [class.selected]=\"conta === contaSelecionada\" \r\n        class=\"account-button\">\r\n        {{ conta.nomeTitular }} - Saldo: {{ conta.saldo | currency }}\r\n      </button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n  <!-- Se uma conta for selecionada -->\r\n  <div *ngIf=\"contaSelecionada\">\r\n    <h3>Detalhes da Conta: {{ contaSelecionada.nomeTitular }}</h3>\r\n\r\n    <!-- Depósito -->\r\n    <!-- <div>\r\n      <h4>Realizar Depósito</h4>\r\n      <input type=\"number\" [(ngModel)]=\"valor\" placeholder=\"Valor do Depósito\" />\r\n      <button (click)=\"realizarDeposito()\">Depositar</button>\r\n    </div> -->\r\n\r\n    <!-- Saque -->\r\n    <!-- <div>\r\n      <h4>Realizar Saque</h4>\r\n      <input type=\"number\" [(ngModel)]=\"valor\" placeholder=\"Valor do Saque\" />\r\n      <button (click)=\"realizarSaque()\">Sacar</button>\r\n    </div> -->\r\n    <!-- Realizar transação (Depósito ou Saque) -->\r\n  <div>\r\n    <h4>Realizar Transação</h4>\r\n\r\n    <!-- Campo único de valor (para depósito ou saque) -->\r\n    <input type=\"number\" [(ngModel)]=\"valor\" placeholder=\"Digite o valor\" />\r\n\r\n    <!-- Botão de Depósito -->\r\n    <button (click)=\"realizarDeposito()\" *ngIf=\"valor > 0\">Depositar</button>\r\n\r\n    <!-- Botão de Saque -->\r\n    <button (click)=\"realizarSaque()\" *ngIf=\"valor > 0\">Sacar</button>\r\n  </div>\r\n    <!-- Extrato -->\r\n    <div>\r\n      <h4>Extrato da Conta</h4>\r\n      <button (click)=\"carregarExtrato()\">Carregar Extrato</button>\r\n      <!-- Exibe o extrato se o botão for clicado -->\r\n      <div *ngIf=\"extrato.length > 0\">\r\n        <ul>\r\n          <li *ngFor=\"let transacao of extrato\">\r\n            <!-- Formatando a data de acordo com o tipo de dado recebido -->\r\n            <span>{{ transacao.dataTransacao | date: 'dd/MM/yyyy HH:mm' }}</span> - \r\n            <span>{{ transacao.tipo }}</span> - \r\n            <span>{{ transacao.valor | currency }}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div *ngIf=\"extrato.length === 0\">\r\n        <p>Nenhuma transação registrada.</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Detalhes da conta -->\r\n    <!-- <div>\r\n      <button (click)=\"carregarDetalhesConta()\">Carregar Detalhes</button>\r\n      <div *ngIf=\"contaSelecionada\">\r\n        <p><strong>Saldo Atual:</strong> {{ contaSelecionada.saldo | currency }}</p>\r\n      </div>\r\n    </div>\r\n  </div> -->\r\n\r\n  <!-- Exibição de erros -->\r\n  <div *ngIf=\"erro\" class=\"error\">\r\n    <p>Ocorreu um erro ao carregar as contas. Tente novamente.</p>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}