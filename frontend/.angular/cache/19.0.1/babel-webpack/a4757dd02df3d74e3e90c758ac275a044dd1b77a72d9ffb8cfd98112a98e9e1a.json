{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    idUsuario = null;\n    // Método para salvar o id do usuário\n    salvarIdUsuario(id) {\n      this.idUsuario = id;\n      localStorage.setItem('idUsuario', id.toString()); // Armazena no localStorage\n    }\n    // Método para recuperar o id do usuário\n    getIdUsuario() {\n      if (this.idUsuario === null) {\n        const id = localStorage.getItem('idUsuario'); // Busca no localStorage\n        this.idUsuario = id ? parseInt(id, 10) : null;\n      }\n      return this.idUsuario;\n    }\n    // Verifica se o usuário está logado (id != null)\n    isUsuarioLogado() {\n      return this.getIdUsuario() !== null; // Garante que verifica o localStorage\n    }\n    // Método para limpar o ID do usuário\n    limparUsuario() {\n      this.idUsuario = null;\n      localStorage.removeItem('idUsuario');\n    }\n    static ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":{"version":3,"names":["UserService","idUsuario","salvarIdUsuario","id","localStorage","setItem","toString","getIdUsuario","getItem","parseInt","isUsuarioLogado","limparUsuario","removeItem","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Tentativa\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private idUsuario: number | null = null;\r\n\r\n  // Método para salvar o id do usuário\r\n  salvarIdUsuario(id: number): void {\r\n    this.idUsuario = id;\r\n    localStorage.setItem('idUsuario', id.toString()); // Armazena no localStorage\r\n  }\r\n\r\n  // Método para recuperar o id do usuário\r\n  getIdUsuario(): number | null {\r\n    if (this.idUsuario === null) {\r\n      const id = localStorage.getItem('idUsuario'); // Busca no localStorage\r\n      this.idUsuario = id ? parseInt(id, 10) : null;\r\n    }\r\n    return this.idUsuario;\r\n  }\r\n\r\n  // Verifica se o usuário está logado (id != null)\r\n  isUsuarioLogado(): boolean {\r\n    return this.getIdUsuario() !== null; // Garante que verifica o localStorage\r\n  }\r\n\r\n  // Método para limpar o ID do usuário\r\n  limparUsuario(): void {\r\n    this.idUsuario = null;\r\n    localStorage.removeItem('idUsuario');\r\n  }\r\n}\r\n"],"mappings":";AAKA,WAAaA,WAAW;EAAlB,MAAOA,WAAW;IACdC,SAAS,GAAkB,IAAI;IAEvC;IACAC,eAAeA,CAACC,EAAU;MACxB,IAAI,CAACF,SAAS,GAAGE,EAAE;MACnBC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,EAAE,CAACG,QAAQ,EAAE,CAAC,CAAC,CAAC;IACpD;IAEA;IACAC,YAAYA,CAAA;MACV,IAAI,IAAI,CAACN,SAAS,KAAK,IAAI,EAAE;QAC3B,MAAME,EAAE,GAAGC,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9C,IAAI,CAACP,SAAS,GAAGE,EAAE,GAAGM,QAAQ,CAACN,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI;MAC/C;MACA,OAAO,IAAI,CAACF,SAAS;IACvB;IAEA;IACAS,eAAeA,CAAA;MACb,OAAO,IAAI,CAACH,YAAY,EAAE,KAAK,IAAI,CAAC,CAAC;IACvC;IAEA;IACAI,aAAaA,CAAA;MACX,IAAI,CAACV,SAAS,GAAG,IAAI;MACrBG,YAAY,CAACQ,UAAU,CAAC,WAAW,CAAC;IACtC;;uCA3BWZ,WAAW;IAAA;;aAAXA,WAAW;MAAAa,OAAA,EAAXb,WAAW,CAAAc,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPf,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}