{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/conta.service\";\nimport * as i2 from \"@angular/common\";\nfunction ContaComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3, \"ID:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Titular:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Status:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\")(14, \"strong\");\n    i0.ɵɵtext(15, \"Data de Cria\\u00E7\\u00E3o:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.conta.idConta, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.conta.nomeTitular, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.conta.status ? \"Ativa\" : \"Inativa\", \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.conta.dataCriacao, \"\");\n  }\n}\nfunction ContaComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Saldo:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"currency\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, ctx_r0.saldo), \"\");\n  }\n}\nfunction ContaComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"currency\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const transacao_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", transacao_r2.tipo, \" - \", i0.ɵɵpipeBind1(2, 2, transacao_r2.valor), \" \");\n  }\n}\nfunction ContaComponent_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.erro);\n  }\n}\nexport let ContaComponent = /*#__PURE__*/(() => {\n  class ContaComponent {\n    contaService;\n    contas = [];\n    contaSelecionada = null;\n    nomeTitular = '';\n    valor = 0;\n    mostrarExtrato = false;\n    extrato = [];\n    erro = false;\n    constructor(contaService) {\n      this.contaService = contaService;\n    }\n    ngOnInit() {\n      this.listarContas();\n    }\n    listarContas() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado! Faça login para listar as contas.');\n        return;\n      }\n      this.contaService.listarContasPorUsuario().subscribe({\n        next: dados => {\n          console.log('Contas retornadas pelo backend:', dados);\n          this.contas = dados;\n          this.erro = false;\n        },\n        error: err => {\n          console.error('Erro ao listar contas:', err);\n          this.erro = true;\n          alert('Não foi possível listar as contas.');\n        }\n      });\n    }\n    selecionarConta(conta) {\n      this.contaSelecionada = conta;\n      this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\n    }\n    criarConta() {\n      const idUsuario = localStorage.getItem('idUsuario');\n      if (!idUsuario) {\n        alert('Usuário não autenticado!');\n        return;\n      }\n      if (!this.nomeTitular.trim()) {\n        alert('Informe o nome do titular para criar a conta.');\n        return;\n      }\n      this.contaService.criarConta({\n        nomeTitular: this.nomeTitular\n      }, +idUsuario).subscribe({\n        next: novaConta => {\n          console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\n          alert('Conta criada com sucesso!');\n          if (novaConta) {\n            this.contas.push(novaConta); // Adiciona a nova conta à lista\n            this.selecionarConta(novaConta); // Seleciona a conta automaticamente\n          } else {\n            console.error('Erro: A resposta da API não contém uma conta válida.');\n          }\n        },\n        error: err => {\n          console.error('Erro ao criar conta:', err);\n          alert('Erro ao criar a conta.');\n        }\n      });\n    }\n    realizarDeposito() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para depósito.');\n        return;\n      }\n      this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Depósito realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar depósito:', err);\n          alert('Erro ao realizar depósito. Tente novamente.');\n        }\n      });\n    }\n    realizarSaque() {\n      if (!this.contaSelecionada || this.valor <= 0) {\n        alert('Informe um valor válido para saque.');\n        return;\n      }\n      this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\n        next: contaAtualizada => {\n          alert('Saque realizado com sucesso!');\n          this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\n          this.valor = 0; // Limpa o campo de valor\n        },\n        error: err => {\n          console.error('Erro ao realizar saque:', err);\n          alert('Erro ao realizar saque. Tente novamente.');\n        }\n      });\n    }\n    alternarExtrato() {\n      this.mostrarExtrato = !this.mostrarExtrato;\n      if (this.mostrarExtrato) {\n        this.carregarExtrato();\n      }\n    }\n    carregarExtrato() {\n      if (!this.contaSelecionada) {\n        alert('Selecione uma conta para visualizar o extrato.');\n        return;\n      }\n      this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\n        next: extrato => {\n          this.extrato = extrato;\n        },\n        error: err => {\n          console.error('Erro ao carregar extrato:', err);\n          alert('Erro ao carregar o extrato.');\n        }\n      });\n    }\n    carregarDetalhesConta() {\n      if (!this.contaSelecionada) {\n        return;\n      }\n      this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\n        next: contaAtualizada => {\n          this.contaSelecionada = contaAtualizada;\n        },\n        error: err => {\n          console.error('Erro ao carregar detalhes da conta:', err);\n          alert('Erro ao carregar detalhes da conta.');\n        }\n      });\n    }\n    static ɵfac = function ContaComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaComponent)(i0.ɵɵdirectiveInject(i1.ContaService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ContaComponent,\n      selectors: [[\"app-conta\"]],\n      decls: 12,\n      vars: 4,\n      consts: [[4, \"ngIf\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n      template: function ContaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n          i0.ɵɵtext(2, \"Conta Banc\\u00E1ria\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, ContaComponent_div_3_Template, 17, 4, \"div\", 0);\n          i0.ɵɵelementStart(4, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function ContaComponent_Template_button_click_4_listener() {\n            return ctx.consultarSaldo(ctx.conta == null ? null : ctx.conta.idConta);\n          });\n          i0.ɵɵtext(5, \"Consultar Saldo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, ContaComponent_p_6_Template, 5, 3, \"p\", 0);\n          i0.ɵɵelementStart(7, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function ContaComponent_Template_button_click_7_listener() {\n            return ctx.obterExtrato(ctx.conta == null ? null : ctx.conta.idConta);\n          });\n          i0.ɵɵtext(8, \"Obter Extrato\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"ul\");\n          i0.ɵɵtemplate(10, ContaComponent_li_10_Template, 3, 4, \"li\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(11, ContaComponent_p_11_Template, 2, 1, \"p\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.conta);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.saldo !== null);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.extrato);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.erro);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, i2.CurrencyPipe, FormsModule],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ContaComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","conta","idConta","nomeTitular","status","dataCriacao","ɵɵpipeBind1","saldo","ɵɵtextInterpolate2","transacao_r2","tipo","valor","ɵɵtextInterpolate","erro","ContaComponent","contaService","contas","contaSelecionada","mostrarExtrato","extrato","constructor","ngOnInit","listarContas","idUsuario","localStorage","getItem","alert","listarContasPorUsuario","subscribe","next","dados","console","log","error","err","selecionarConta","criarConta","trim","novaConta","push","realizarDeposito","contaAtualizada","realizarSaque","alternarExtrato","carregarExtrato","getExtrato","carregarDetalhesConta","obterDetalhesConta","ɵɵdirectiveInject","i1","ContaService","selectors","decls","vars","consts","template","ContaComponent_Template","rf","ctx","ɵɵtemplate","ContaComponent_div_3_Template","ɵɵlistener","ContaComponent_Template_button_click_4_listener","consultarSaldo","ContaComponent_p_6_Template","ContaComponent_Template_button_click_7_listener","obterExtrato","ContaComponent_li_10_Template","ContaComponent_p_11_Template","ɵɵproperty","i2","NgForOf","NgIf","CurrencyPipe","styles"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts","C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ContaService } from '../services/conta.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-conta',\r\n  templateUrl: './conta-component.component.html',\r\n  styleUrls: ['./conta-component.component.css'],\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class ContaComponent implements OnInit {\r\n  contas: ContaDTO[] = [];\r\n  contaSelecionada: ContaDTO | null = null;\r\n  nomeTitular: string = '';\r\n  valor: number = 0;\r\n  mostrarExtrato: boolean = false;\r\n  extrato: any[] = [];\r\n  erro: boolean = false;\r\n\r\n  constructor(private contaService: ContaService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.listarContas();\r\n  }\r\n\r\n  listarContas(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado! Faça login para listar as contas.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.listarContasPorUsuario().subscribe({\r\n      next: (dados: ContaDTO[]) => {\r\n        console.log('Contas retornadas pelo backend:', dados);\r\n        this.contas = dados;\r\n        this.erro = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao listar contas:', err);\r\n        this.erro = true;\r\n        alert('Não foi possível listar as contas.');\r\n      },\r\n    });\r\n  }\r\n  \r\n  \r\n\r\n  selecionarConta(conta: ContaDTO): void {\r\n    this.contaSelecionada = conta;\r\n    this.mostrarExtrato = false; // Ocultar extrato ao selecionar outra conta\r\n  }\r\n\r\n  criarConta(): void {\r\n    const idUsuario = localStorage.getItem('idUsuario');\r\n    if (!idUsuario) {\r\n      alert('Usuário não autenticado!');\r\n      return;\r\n    }\r\n  \r\n    if (!this.nomeTitular.trim()) {\r\n      alert('Informe o nome do titular para criar a conta.');\r\n      return;\r\n    }\r\n  \r\n    this.contaService.criarConta({ nomeTitular: this.nomeTitular }, +idUsuario).subscribe({\r\n      next: (novaConta: ContaDTO) => {\r\n        console.log('Resposta da API (novaConta):', novaConta); // Verifique o que está sendo retornado\r\n        alert('Conta criada com sucesso!');\r\n        if (novaConta) {\r\n          this.contas.push(novaConta);  // Adiciona a nova conta à lista\r\n          this.selecionarConta(novaConta);  // Seleciona a conta automaticamente\r\n        } else {\r\n          console.error('Erro: A resposta da API não contém uma conta válida.');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao criar conta:', err);\r\n        alert('Erro ao criar a conta.');\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  realizarDeposito(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para depósito.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarDeposito(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Depósito realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar depósito:', err);\r\n        alert('Erro ao realizar depósito. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n\r\n  realizarSaque(): void {\r\n    if (!this.contaSelecionada || this.valor <= 0) {\r\n      alert('Informe um valor válido para saque.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.realizarSaque(this.contaSelecionada.idConta, this.valor).subscribe({\r\n      next: (contaAtualizada) => {\r\n        alert('Saque realizado com sucesso!');\r\n        this.contaSelecionada = contaAtualizada; // Atualiza o saldo da conta\r\n        this.valor = 0; // Limpa o campo de valor\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao realizar saque:', err);\r\n        alert('Erro ao realizar saque. Tente novamente.');\r\n      },\r\n    });\r\n  }\r\n\r\n  alternarExtrato(): void {\r\n    this.mostrarExtrato = !this.mostrarExtrato;\r\n    if (this.mostrarExtrato) {\r\n      this.carregarExtrato();\r\n    }\r\n  }\r\n\r\n  carregarExtrato(): void {\r\n    if (!this.contaSelecionada) {\r\n      alert('Selecione uma conta para visualizar o extrato.');\r\n      return;\r\n    }\r\n\r\n    this.contaService.getExtrato(this.contaSelecionada.idConta).subscribe({\r\n      next: (extrato) => {\r\n        this.extrato = extrato;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar extrato:', err);\r\n        alert('Erro ao carregar o extrato.');\r\n      },\r\n    });\r\n  }\r\n\r\n  carregarDetalhesConta(): void {\r\n    if (!this.contaSelecionada) {\r\n      return;\r\n    }\r\n\r\n    this.contaService.obterDetalhesConta(this.contaSelecionada.idConta).subscribe({\r\n      next: (contaAtualizada) => {\r\n        this.contaSelecionada = contaAtualizada;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erro ao carregar detalhes da conta:', err);\r\n        alert('Erro ao carregar detalhes da conta.');\r\n      },\r\n    });\r\n  }\r\n}\r\n","<div>\r\n  <h2>Conta Bancária</h2>\r\n  <div *ngIf=\"conta\">\r\n    <p><strong>ID:</strong> {{ conta.idConta }}</p>\r\n    <p><strong>Titular:</strong> {{ conta.nomeTitular }}</p>\r\n    <p><strong>Status:</strong> {{ conta.status ? 'Ativa' : 'Inativa' }}</p>\r\n    <p><strong>Data de Criação:</strong> {{ conta.dataCriacao }}</p>\r\n  </div>\r\n\r\n  <button (click)=\"consultarSaldo(conta?.idConta)\">Consultar Saldo</button>\r\n  <p *ngIf=\"saldo !== null\"><strong>Saldo:</strong> {{ saldo | currency }}</p>\r\n\r\n  <button (click)=\"obterExtrato(conta?.idConta)\">Obter Extrato</button>\r\n  <ul>\r\n    <li *ngFor=\"let transacao of extrato\">\r\n      {{ transacao.tipo }} - {{ transacao.valor | currency }}\r\n    </li>\r\n  </ul>\r\n\r\n  <p *ngIf=\"erro\" class=\"error\">{{ erro }}</p>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}