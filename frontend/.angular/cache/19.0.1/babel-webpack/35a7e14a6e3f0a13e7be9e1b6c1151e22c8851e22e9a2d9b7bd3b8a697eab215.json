{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContaService = /*#__PURE__*/(() => {\n  class ContaService {\n    http;\n    apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Cria uma nova conta para um usuário.\n     * @param contaDTO Dados da conta (nome do titular).\n     * @param idUsuario ID do usuário proprietário da conta.\n     * @returns Observable contendo a conta criada.\n     */\n    criarConta(contaDTO, idUsuario) {\n      return this.http.post(`${this.apiUrl}/${idUsuario}`, contaDTO);\n    }\n    /**\n     * Lista todas as contas de um usuário específico.\n     * @param idUsuario ID do usuário para buscar as contas.\n     * @returns Observable contendo a lista de contas.\n     */\n    listarContas(idUsuario) {\n      if (!idUsuario) {\n        return of([]); // Retorna um array vazio caso o ID do usuário seja inválido.\n      }\n      return this.http.get(`${this.apiUrl}/usuario/${idUsuario}`);\n    }\n    /**\n     * Realiza um depósito em uma conta.\n     * @param idConta ID da conta que receberá o depósito.\n     * @param valor Valor a ser depositado.\n     * @returns Observable contendo os dados atualizados da conta.\n     */\n    realizarDeposito(idConta, valor) {\n      if (valor <= 0) {\n        throw new Error('Valor de depósito inválido');\n      }\n      return this.http.post(`${this.apiUrl}/${idConta}/deposito`, {\n        valor\n      });\n    }\n    /**\n     * Realiza um saque em uma conta.\n     * @param idConta ID da conta de onde será realizado o saque.\n     * @param valor Valor a ser sacado.\n     * @returns Observable contendo os dados atualizados da conta.\n     */\n    realizarSaque(idConta, valor) {\n      if (valor <= 0) {\n        throw new Error('Valor de saque inválido');\n      }\n      return this.http.post(`${this.apiUrl}/${idConta}/saque`, {\n        valor\n      });\n    }\n    /**\n     * Consulta o saldo de uma conta específica.\n     * @param idConta ID da conta para consultar o saldo.\n     * @returns Observable contendo o saldo da conta.\n     */\n    getSaldo(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/saldo`);\n    }\n    /**\n     * Obtém o extrato de uma conta específica.\n     * @param idConta ID da conta para consultar o extrato.\n     * @returns Observable contendo o extrato da conta.\n     */\n    getExtrato(idConta) {\n      return this.http.get(`${this.apiUrl}/${idConta}/extrato`);\n    }\n    static ɵfac = function ContaService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContaService,\n      factory: ContaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContaService;\n})();","map":{"version":3,"names":["of","ContaService","http","apiUrl","constructor","criarConta","contaDTO","idUsuario","post","listarContas","get","realizarDeposito","idConta","valor","Error","realizarSaque","getSaldo","getExtrato","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mallmann\\Desktop\\Teste\\frontend\\src\\app\\conta-component\\conta-component.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ContaDTO } from '../conta.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContaService {\r\n  private apiUrl = 'http://localhost:8080/api/contas'; // URL base da API\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Cria uma nova conta para um usuário.\r\n   * @param contaDTO Dados da conta (nome do titular).\r\n   * @param idUsuario ID do usuário proprietário da conta.\r\n   * @returns Observable contendo a conta criada.\r\n   */\r\n  criarConta(contaDTO: { nomeTitular: string }, idUsuario: number): Observable<ContaDTO> {\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idUsuario}`, contaDTO);\r\n  }\r\n\r\n  /**\r\n   * Lista todas as contas de um usuário específico.\r\n   * @param idUsuario ID do usuário para buscar as contas.\r\n   * @returns Observable contendo a lista de contas.\r\n   */\r\n  listarContas(idUsuario: number): Observable<ContaDTO[]> {\r\n    if (!idUsuario) {\r\n      return of([]); // Retorna um array vazio caso o ID do usuário seja inválido.\r\n    }\r\n    return this.http.get<ContaDTO[]>(`${this.apiUrl}/usuario/${idUsuario}`);\r\n  }\r\n\r\n  /**\r\n   * Realiza um depósito em uma conta.\r\n   * @param idConta ID da conta que receberá o depósito.\r\n   * @param valor Valor a ser depositado.\r\n   * @returns Observable contendo os dados atualizados da conta.\r\n   */\r\n  realizarDeposito(idConta: number, valor: number): Observable<ContaDTO> {\r\n    if (valor <= 0) {\r\n      throw new Error('Valor de depósito inválido');\r\n    }\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idConta}/deposito`, { valor });\r\n  }\r\n\r\n  /**\r\n   * Realiza um saque em uma conta.\r\n   * @param idConta ID da conta de onde será realizado o saque.\r\n   * @param valor Valor a ser sacado.\r\n   * @returns Observable contendo os dados atualizados da conta.\r\n   */\r\n  realizarSaque(idConta: number, valor: number): Observable<ContaDTO> {\r\n    if (valor <= 0) {\r\n      throw new Error('Valor de saque inválido');\r\n    }\r\n    return this.http.post<ContaDTO>(`${this.apiUrl}/${idConta}/saque`, { valor });\r\n  }\r\n\r\n  /**\r\n   * Consulta o saldo de uma conta específica.\r\n   * @param idConta ID da conta para consultar o saldo.\r\n   * @returns Observable contendo o saldo da conta.\r\n   */\r\n  getSaldo(idConta: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${idConta}/saldo`);\r\n  }\r\n\r\n  /**\r\n   * Obtém o extrato de uma conta específica.\r\n   * @param idConta ID da conta para consultar o extrato.\r\n   * @returns Observable contendo o extrato da conta.\r\n   */\r\n  getExtrato(idConta: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/${idConta}/extrato`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;AAMrC,WAAaC,YAAY;EAAnB,MAAOA,YAAY;IAGHC,IAAA;IAFZC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IAErDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;;;;;;IAMAG,UAAUA,CAACC,QAAiC,EAAEC,SAAiB;MAC7D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,MAAM,IAAII,SAAS,EAAE,EAAED,QAAQ,CAAC;IAC1E;IAEA;;;;;IAKAG,YAAYA,CAACF,SAAiB;MAC5B,IAAI,CAACA,SAAS,EAAE;QACd,OAAOP,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB;MACA,OAAO,IAAI,CAACE,IAAI,CAACQ,GAAG,CAAa,GAAG,IAAI,CAACP,MAAM,YAAYI,SAAS,EAAE,CAAC;IACzE;IAEA;;;;;;IAMAI,gBAAgBA,CAACC,OAAe,EAAEC,KAAa;MAC7C,IAAIA,KAAK,IAAI,CAAC,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,MAAM,IAAIS,OAAO,WAAW,EAAE;QAAEC;MAAK,CAAE,CAAC;IAClF;IAEA;;;;;;IAMAE,aAAaA,CAACH,OAAe,EAAEC,KAAa;MAC1C,IAAIA,KAAK,IAAI,CAAC,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,MAAM,IAAIS,OAAO,QAAQ,EAAE;QAAEC;MAAK,CAAE,CAAC;IAC/E;IAEA;;;;;IAKAG,QAAQA,CAACJ,OAAe;MACtB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAS,GAAG,IAAI,CAACP,MAAM,IAAIS,OAAO,QAAQ,CAAC;IACjE;IAEA;;;;;IAKAK,UAAUA,CAACL,OAAe;MACxB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,MAAM,IAAIS,OAAO,UAAU,CAAC;IAClE;;uCArEWX,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAZpB,YAAY;MAAAqB,OAAA,EAAZrB,YAAY,CAAAsB,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPvB,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}